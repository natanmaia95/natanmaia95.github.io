<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://natanmaia95.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://natanmaia95.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-26T16:35:45+00:00</updated><id>https://natanmaia95.github.io/feed.xml</id><title type="html">blank</title><subtitle>Computer Science student and game developer. </subtitle><entry><title type="html">Analysing Feedback on Harold Voidskipper</title><link href="https://natanmaia95.github.io/blog/2024/analysing-feedback-haroldvoidskipper/" rel="alternate" type="text/html" title="Analysing Feedback on Harold Voidskipper"/><published>2024-11-25T00:00:00+00:00</published><updated>2024-11-25T00:00:00+00:00</updated><id>https://natanmaia95.github.io/blog/2024/analysing-feedback-haroldvoidskipper</id><content type="html" xml:base="https://natanmaia95.github.io/blog/2024/analysing-feedback-haroldvoidskipper/"><![CDATA[<p>I just came back from showcasing Harold Voidskipper in a convention called <em>Feira do Conhecimento</em> (Knowledge Fair) alongside other dev friends. For a jam game it has given me a lot to think about in terms of level, combat and UX design in how many different people got to play it. There was the original jam, two entire conventions with many school students as attendees, and a handful of gamedev gatherings, and all of those gave me a bunch of stuff to think about.</p> <p>At one point I had so much to parse that on day 2 of this last convention I felt it was fine to leave the game unattended for a bit (there were other people guarding my stuff at least) while I used more of my time to socialize and network with the other devs. I needed time to process all the feedback, and writing this blog post is part of that.</p> <p>In this post, I’m writing in a very unfocused manner on what I got from all these test sessions, and what info I can use moving forward for my immediate next projects. I’m also treating this as a Post-mortem of sorts for Harold Voidskipper as I move full steam ahead into my next projects.</p> <h2 id="context">Context</h2> <p><em>Harold Voidskipper</em> is a game I made during Harold Jam 2024, an event celebrating RPGMaker games with their tropes and little default characters, but didn’t require the games to be made in that engine (so I told a little story with the default characters in Godot instead). It’s an action game with a cutesy aesthetic, and a control scheme inspired by Enter the Gungeon with twin-stick shooting and dodge rolls, with a bullet hell final boss to match that intensity in mechanics. It’s one of the first projects where I focused on polishing and visuals as combat was already implemented in another project and just moved over.</p> <p><em>Voidskipper</em> (no Harold here) is what I’m calling my next game project that inherits its combat engine from Harold Voidskipper, but not necessarily design. Throughout this blog post I’ll be approaching Voidskipper as a game which sells itself as a “Character Action Game for babies”, a nice Unique Selling Point or USP inspired by the in-depth movesets the copy abilities in recent Kirby games have. The concept is built on top of a Nintendo-style difficulty design of having very accessible main progression with progressively difficult extra challenges culminating in tough tests of skill.</p> <p>Right, let’s get into the notes!</p> <h2 id="general-combat">General Combat</h2> <p>Only 5% of players understood how Potions worked without any intervention. Between the UI being subtle, the red XBOX B icon next to it not looking like a button and not matching my test controller (switch pro controller), and me forgetting to show the button icon alongside the keyboard SHIFT icon in the npc tutorial (70% of players missed the entire dialogue btw, not even touching that npc), it wasn’t clear how to trigger it. Yes, TUNIC does it similarly, but still. When they did trigger it (mashing, etc), they missed its meaning because to prevent accidentally using your potions and for combat design I made you have to hold B for half a second, but the animation was recycled from the spark ball attack (it’s a game jam game) and didn’t make it clear something different was happening AND you had to hold the button for longer.</p> <p>For the conveyance problem with potions, there are a few solutions. I could make the time to heal faster up to .2 or .3 seconds. I could make a discrete animation showing Harold drink the potion gradually like you see in Dark Souls or Monster Hunter, or I could’ve showed a bar above his head that fills as you hold the button, similarly to how Kirby shows the “Drop Ability” command bound to Nintendo A, or how modern games have actions that ask you to hold a button (open chest, skip cutscene) and those have a progress circle around the object or button prompt.</p> <p>Many players didn’t even know they had potions! They likely mashed through or skipped the tutorial npc mentioning “using your potions”, and didn’t parse the HUD graphic as a potion with X uses remaining. A good way a friend mentioned for remedying this was to have the player <em>obtain the potion themselves</em> as a drop after an enemy encounter or something, as if they have collected something, they’ll know it exists and will want to know how to use it. For the future, however, I might ditch that altogether and just do tiny health collectables like most action games have enemies drop, and before bosses award the player with a massive chest of healing orbs like God of War or Darksiders do. It’s automatic and requires less tracking of info from a player.</p> <p>In the next section I mention how many players missed either of the two attack actions, Sword Slash and Spark Ball. One side effect of this is that I got to see people playing with a limited moveset, <em>unintentionally</em>. This showed me that, while the sparks are balanced to have lower damage output to not undermine the sword and its low range, playing using only sparks is not satisfying and really boring.</p> <h2 id="friendliness-and-accessibility">Friendliness and Accessibility</h2> <p><em>Voidskipper</em> has a more general target audience, as per the Nintendo-like direction, and thus I want to appeal to people with a bit less experience in games, but still let them have a good time and feel powerful. In that sense, having two conventions where I got middle and high school students to play the jam game was an amazing opportunity.</p> <p>I got to see first-hand that twin-stick is not obvious to new players, especially on controller (the main control scheme for 95% of tests). People don’t have the tendency to use the right stick, usually the camera stick, in 2D games, and younger kids don’t feel comfortable with using the right stick when they need the thumb to mash the face buttons. The jam game also didn’t require the player to aim at any moment as when not touching the aim stick the attack direction is the player’s moving direction instead, so players weren’t forced to try out the stick like they would be in Gungeon.</p> <p>Even then, despite experienced players telling me my twin-stick feels super smooth and responsive (if not a bit too snappy and maybe capable of giving someone motion sickness), many players tried the twin-stick and gave up on using it as it required attacking with the triggers, and they wanted to attack with face buttons instead, and as such their thumbs were busy.</p> <p>Similarly, younger players also don’t use the shoulder and trigger buttons at all, as it literally halves their grip on the controller, which may either be big, heavy, of an unfamiliar shape, or any combination of those. I had the foresight to patch in alternative face button bindings for the dodge roll and both attack actions before the cons, which did help, but many people missed the Magic Attack bound to XBOX Y because the attack button is usually XBOX X, and if they pressed Y too close to an enemy the spark ball would spawn and immediately disappear, with a sound effect but no visual particle for the hit, which was less satisfying. Many players assumed you could only use the sword. Some also assumed you could only use the sparks, after all “I found the attack button, what else would I need?”.</p> <p>On the topic of face bindings, many Mario and Kirby games bind the same action in multiple buttons, and I have two guesses as to why:</p> <ul> <li>Provide the new player an easier time grasping the basic verbs by mashing buttons instead of tutorials</li> <li>Provide the experienced player a choice of whatever position is most comfortable (doubles as an accessibility factor for people who can’t press a specific button!) Taken to the extreme, you get the Masahiro Sakurai school of 1-button design, used in Kirby Air Ride and other projects of his. In Kirby Air Ride, you have one action button (the big green A on your gamecube controller) that takes care of braking and drifting, boosting and grinding, attacking and stealing items. If players still somehow miss that (including the short tutorial), the L and R buttons are also bound to all of those actions, for redundancy. I am open to corrections, though, as there’s probably a third reason for this I haven’t figured out.</li> </ul> <p>I think the cutesy artstyle with chibi characters and stars and vibrant colors also helped attract a more general audience. Averaging the entire duration of this last event I saw a very rough 50/50 gender split on who came to my little TV stand, as well as who stayed for more than 2 minutes (dying once or twice). Compared to some of my friends with more gritty games who saw mostly high school boys check them out.</p> <p>I do have to mention, the players who endured the game for more than two levels (eventually leaving when the difficulty got cheap i.e. swamp and cave maps) were 4 older boys, 1 girl, 2 adults, and other devs.</p> <h2 id="conclusion">Conclusion</h2> <p>The main conclusion here is that I’m bad at writing post-mortems XD</p> <p>Voidskipper is shelved so far as I level up stuff like enemy pathfinding and AI, so when I’m eventually free from university work I can probably pick it back up. I’m looking forward to it though.</p>]]></content><author><name></name></author><category term="personal"/><category term="devlog"/><summary type="html"><![CDATA[I just came back from showcasing Harold Voidskipper in a convention called Feira do Conhecimento (Knowledge Fair) alongside other dev friends. For a jam game it has given me a lot to think about in terms of level, combat and UX design in how many different people got to play it. There was the original jam, two entire conventions with many school students as attendees, and a handful of gamedev gatherings, and all of those gave me a bunch of stuff to think about. At one point I had so much to parse that on day 2 of this last convention I felt it was fine to leave the game unattended for a bit (there were other people guarding my stuff at least) while I used more of my time to socialize and network with the other devs. I needed time to process all the feedback, and writing this blog post is part of that. In this post, I’m writing in a very unfocused manner on what I got from all these test sessions, and what info I can use moving forward for my immediate next projects. I’m also treating this as a Post-mortem of sorts for Harold Voidskipper as I move full steam ahead into my next projects. Context Harold Voidskipper is a game I made during Harold Jam 2024, an event celebrating RPGMaker games with their tropes and little default characters, but didn’t require the games to be made in that engine (so I told a little story with the default characters in Godot instead). It’s an action game with a cutesy aesthetic, and a control scheme inspired by Enter the Gungeon with twin-stick shooting and dodge rolls, with a bullet hell final boss to match that intensity in mechanics. It’s one of the first projects where I focused on polishing and visuals as combat was already implemented in another project and just moved over. Voidskipper (no Harold here) is what I’m calling my next game project that inherits its combat engine from Harold Voidskipper, but not necessarily design. Throughout this blog post I’ll be approaching Voidskipper as a game which sells itself as a “Character Action Game for babies”, a nice Unique Selling Point or USP inspired by the in-depth movesets the copy abilities in recent Kirby games have. The concept is built on top of a Nintendo-style difficulty design of having very accessible main progression with progressively difficult extra challenges culminating in tough tests of skill. Right, let’s get into the notes! General Combat Only 5% of players understood how Potions worked without any intervention. Between the UI being subtle, the red XBOX B icon next to it not looking like a button and not matching my test controller (switch pro controller), and me forgetting to show the button icon alongside the keyboard SHIFT icon in the npc tutorial (70% of players missed the entire dialogue btw, not even touching that npc), it wasn’t clear how to trigger it. Yes, TUNIC does it similarly, but still. When they did trigger it (mashing, etc), they missed its meaning because to prevent accidentally using your potions and for combat design I made you have to hold B for half a second, but the animation was recycled from the spark ball attack (it’s a game jam game) and didn’t make it clear something different was happening AND you had to hold the button for longer. For the conveyance problem with potions, there are a few solutions. I could make the time to heal faster up to .2 or .3 seconds. I could make a discrete animation showing Harold drink the potion gradually like you see in Dark Souls or Monster Hunter, or I could’ve showed a bar above his head that fills as you hold the button, similarly to how Kirby shows the “Drop Ability” command bound to Nintendo A, or how modern games have actions that ask you to hold a button (open chest, skip cutscene) and those have a progress circle around the object or button prompt. Many players didn’t even know they had potions! They likely mashed through or skipped the tutorial npc mentioning “using your potions”, and didn’t parse the HUD graphic as a potion with X uses remaining. A good way a friend mentioned for remedying this was to have the player obtain the potion themselves as a drop after an enemy encounter or something, as if they have collected something, they’ll know it exists and will want to know how to use it. For the future, however, I might ditch that altogether and just do tiny health collectables like most action games have enemies drop, and before bosses award the player with a massive chest of healing orbs like God of War or Darksiders do. It’s automatic and requires less tracking of info from a player. In the next section I mention how many players missed either of the two attack actions, Sword Slash and Spark Ball. One side effect of this is that I got to see people playing with a limited moveset, unintentionally. This showed me that, while the sparks are balanced to have lower damage output to not undermine the sword and its low range, playing using only sparks is not satisfying and really boring. Friendliness and Accessibility Voidskipper has a more general target audience, as per the Nintendo-like direction, and thus I want to appeal to people with a bit less experience in games, but still let them have a good time and feel powerful. In that sense, having two conventions where I got middle and high school students to play the jam game was an amazing opportunity. I got to see first-hand that twin-stick is not obvious to new players, especially on controller (the main control scheme for 95% of tests). People don’t have the tendency to use the right stick, usually the camera stick, in 2D games, and younger kids don’t feel comfortable with using the right stick when they need the thumb to mash the face buttons. The jam game also didn’t require the player to aim at any moment as when not touching the aim stick the attack direction is the player’s moving direction instead, so players weren’t forced to try out the stick like they would be in Gungeon. Even then, despite experienced players telling me my twin-stick feels super smooth and responsive (if not a bit too snappy and maybe capable of giving someone motion sickness), many players tried the twin-stick and gave up on using it as it required attacking with the triggers, and they wanted to attack with face buttons instead, and as such their thumbs were busy. Similarly, younger players also don’t use the shoulder and trigger buttons at all, as it literally halves their grip on the controller, which may either be big, heavy, of an unfamiliar shape, or any combination of those. I had the foresight to patch in alternative face button bindings for the dodge roll and both attack actions before the cons, which did help, but many people missed the Magic Attack bound to XBOX Y because the attack button is usually XBOX X, and if they pressed Y too close to an enemy the spark ball would spawn and immediately disappear, with a sound effect but no visual particle for the hit, which was less satisfying. Many players assumed you could only use the sword. Some also assumed you could only use the sparks, after all “I found the attack button, what else would I need?”. On the topic of face bindings, many Mario and Kirby games bind the same action in multiple buttons, and I have two guesses as to why: Provide the new player an easier time grasping the basic verbs by mashing buttons instead of tutorials Provide the experienced player a choice of whatever position is most comfortable (doubles as an accessibility factor for people who can’t press a specific button!) Taken to the extreme, you get the Masahiro Sakurai school of 1-button design, used in Kirby Air Ride and other projects of his. In Kirby Air Ride, you have one action button (the big green A on your gamecube controller) that takes care of braking and drifting, boosting and grinding, attacking and stealing items. If players still somehow miss that (including the short tutorial), the L and R buttons are also bound to all of those actions, for redundancy. I am open to corrections, though, as there’s probably a third reason for this I haven’t figured out. I think the cutesy artstyle with chibi characters and stars and vibrant colors also helped attract a more general audience. Averaging the entire duration of this last event I saw a very rough 50/50 gender split on who came to my little TV stand, as well as who stayed for more than 2 minutes (dying once or twice). Compared to some of my friends with more gritty games who saw mostly high school boys check them out. I do have to mention, the players who endured the game for more than two levels (eventually leaving when the difficulty got cheap i.e. swamp and cave maps) were 4 older boys, 1 girl, 2 adults, and other devs. Conclusion The main conclusion here is that I’m bad at writing post-mortems XD Voidskipper is shelved so far as I level up stuff like enemy pathfinding and AI, so when I’m eventually free from university work I can probably pick it back up. I’m looking forward to it though.]]></summary></entry><entry><title type="html">Update on my Projects</title><link href="https://natanmaia95.github.io/blog/2024/update-on-projects/" rel="alternate" type="text/html" title="Update on my Projects"/><published>2024-10-17T00:00:00+00:00</published><updated>2024-10-17T00:00:00+00:00</updated><id>https://natanmaia95.github.io/blog/2024/update-on-projects</id><content type="html" xml:base="https://natanmaia95.github.io/blog/2024/update-on-projects/"><![CDATA[<p>I forgot to update the blog in september due to a very confusing uni finals season, but that’s over and I’ve got my well deserved break. So here’s what I have been working on in the meantime!</p> <h1 id="movement-fps">Movement FPS</h1> <p>It’s a very rough prototype of a movement shooter like Titanfall or Severed Steel, although more grounded. LoboGuarah is working on it with me, and our vision is not fully thought out yet but the idea is to reward the player for doing cool movement techniques with points and speed. I made a <a href="https://natanmaia95.github.io/projects/movement_fps/">project page</a> for it, although it has less details than the rest for now.</p> <p>Guarah is the main designer and he’s saving some time to actually work on level design, but until that comes I don’t have a lot to do on the project.</p> <h1 id="cute-pomodoro">Cute Pomodoro</h1> <p>There’s also this desktop app I’ve made in two weeks. Cute Pomodoro is very simple, just some text notes you can add and a clock you can use to measure your tasks. It also has a <a href="https://natanmaia95.github.io/projects/cute_pomodoro/">project page</a>. Made it because my boyfriend suggested it would be a nice idea to replace his physical post-it task board with a digital one.</p> <p>I still need to make a release build to upload to the Github. All that’s left is to fix some bugs.</p> <h1 id="minecraft-mods">Minecraft Mods</h1> <p>Part of my break time (and finals procrastination) was dedicated to learning Minecraft Modding again, when I saw a new tutorial series for NeoForge. I already had some assets from an older project so after doing a few tutorials I started porting them.</p> <p>I’m making the Palicos from Monster Hunter as minecraft pets, with some design oriented to “lifestyle” features like animations, clothes and skin patterns, learning skills on level up and such, a similar direction that Cobblemon and Digimod take. Here’s a showcase of armor sets I’ve made, including halloween-themed ones for this month.</p> <div class="text-center"> <figure> <picture> <img src="/assets/img/posts/2024/palico_armors.jpg" class="post-img-fluid rounded z-depth-1" width="auto" height="auto" title="" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption">Making these has been a lot of fun!</div> <p>I also implemented some of the weapons from the games, as well as a leveled skill system on top of vanilla enchantments, which armor and weapons can have. They’re not balanced (nor tested at all). I’ll first get the damage formula, including a custom defense stat and elemental stats, ready and usable, to then start making armor sets.</p> <p>There are no intentions of making this a full mod with continuous development (aside maybe releasing the palicos standalone), as it’s more of a “programming toy” for myself. There’s already a monhun mod on the way called Monster Hunter Endless Frontier which focuses on pretty monsters and animations <del>and a cuter palico model than my own</del>, as well as being a full conversion with quests and pet slots and weapon slots. I just want to play with monhun elements in Minecraft, which is a different direction for sure.</p> <p>I’m also making a food-themed mod with friends for an event called <a href="https://modfest.net/1.21">ModFest</a>, but we don’t have lots to showcase just yet.</p> <h1 id="silver-daze">Silver Daze</h1> <p>Sawyer’s work on Silver Daze has slowed down a bit, which left me not a lot to help with. He’s working on one of the final zones that starts wrapping a few story beats and had some more complicated gimmicks to figure out. However, that zone does bring a new… without giving away anything… “quest style” with some fancy HUD elements I can’t wait to work on. Looking forward to showing that off when it’s close to done.</p> <p>We also made a <a href="https://bsky.app/profile/gemgames.bsky.social">Bluesky account for Gem Games and Silver Daze updates</a> which I’m mostly in charge of managing, but I’ve been at a loss of what to post sometimes. I also need a better recording setup than “Windows Screen Capture”, this might be a reason to learn DaVinci Resolve again.</p> <p>I’m also aware Bluesky is a lot more social and a lot less marketing-focused than Twitter, and as such an account exclusively for game news and screenshots wouldn’t get a lot of traction, but I want to have <em>some</em> visibility for the game, and nobody on the team understands vertical content like tiktoks, yt shorts or instagram reels.</p> <h1 id="voidskipper">Voidskipper</h1> <p>Some updates to <a href="https://nate-the-bard.itch.io/haroldjam-2024">Harold Voidskipper</a> are due, but I’ve been working on Movement FPS while I figured that out. I plan on adding a pause screen, an options screen and some way to lock the cursor on the window. Everything has been implemented <em>in the FPS project</em> and just needs to be ported over.</p> <p>That being said, I did mention before that I wanted to make it into a larger game, with more bosses and more replayability. I accidentally ballooned the scope in the GDD and it would be a 6mo - 2y project, which scares me. I can’t see the game having more content (and removing the RPGMaker theme) without <em>rebuilding it</em> and making an effort to make a game that’s not over after two hours.</p> <p>And I just think I have better things to do with that time, like honing my skills for a work portifolio (frontend? backend? I’m not sure yet) or experimenting with more jam games. I will still pick up the project, especially as it’s going to be my playground for “2D combat” features I want to try and implement, but aside of a decent GDD I’ll share another day and a cloudy vision of what I want the game to be, <em>it’s currently on pause</em>.</p> <h1 id="whats-next">What’s next?</h1> <p>I want to set aside some time to study Shaders and Game VFX in general, as well as in regards to creating those in Godot.</p> <p>I also want to learn about making websites but while I understand the technologies (I have made react and react native front-ends before), it still doesn’t hit me how to actually set up, test, host and share websites. Most tutorials I find just teach you how to do HTML-CSS which I already know.</p> <p>Will get to work on improving Harold Voidskipper so I can turn that leaf and start playing with advanced combat mechanics. And I’ll wait for Guarah to get back to work on the Movement FPS, we have lots of ideas to try still.</p> <p>Also, if you don’t already know, I have a Bluesky account as well, <a href="https://bsky.app/profile/natanmaia95.bsky.social">natanmaia95.bsky.social</a>! I sprinkle updates on my projects here and there.</p>]]></content><author><name></name></author><category term="personal"/><category term="devlog"/><summary type="html"><![CDATA[I forgot to update the blog in september due to a very confusing uni finals season, but that’s over and I’ve got my well deserved break. So here’s what I have been working on in the meantime! Movement FPS It’s a very rough prototype of a movement shooter like Titanfall or Severed Steel, although more grounded. LoboGuarah is working on it with me, and our vision is not fully thought out yet but the idea is to reward the player for doing cool movement techniques with points and speed. I made a project page for it, although it has less details than the rest for now. Guarah is the main designer and he’s saving some time to actually work on level design, but until that comes I don’t have a lot to do on the project. Cute Pomodoro There’s also this desktop app I’ve made in two weeks. Cute Pomodoro is very simple, just some text notes you can add and a clock you can use to measure your tasks. It also has a project page. Made it because my boyfriend suggested it would be a nice idea to replace his physical post-it task board with a digital one. I still need to make a release build to upload to the Github. All that’s left is to fix some bugs. Minecraft Mods Part of my break time (and finals procrastination) was dedicated to learning Minecraft Modding again, when I saw a new tutorial series for NeoForge. I already had some assets from an older project so after doing a few tutorials I started porting them. I’m making the Palicos from Monster Hunter as minecraft pets, with some design oriented to “lifestyle” features like animations, clothes and skin patterns, learning skills on level up and such, a similar direction that Cobblemon and Digimod take. Here’s a showcase of armor sets I’ve made, including halloween-themed ones for this month. Making these has been a lot of fun! I also implemented some of the weapons from the games, as well as a leveled skill system on top of vanilla enchantments, which armor and weapons can have. They’re not balanced (nor tested at all). I’ll first get the damage formula, including a custom defense stat and elemental stats, ready and usable, to then start making armor sets. There are no intentions of making this a full mod with continuous development (aside maybe releasing the palicos standalone), as it’s more of a “programming toy” for myself. There’s already a monhun mod on the way called Monster Hunter Endless Frontier which focuses on pretty monsters and animations and a cuter palico model than my own, as well as being a full conversion with quests and pet slots and weapon slots. I just want to play with monhun elements in Minecraft, which is a different direction for sure. I’m also making a food-themed mod with friends for an event called ModFest, but we don’t have lots to showcase just yet. Silver Daze Sawyer’s work on Silver Daze has slowed down a bit, which left me not a lot to help with. He’s working on one of the final zones that starts wrapping a few story beats and had some more complicated gimmicks to figure out. However, that zone does bring a new… without giving away anything… “quest style” with some fancy HUD elements I can’t wait to work on. Looking forward to showing that off when it’s close to done. We also made a Bluesky account for Gem Games and Silver Daze updates which I’m mostly in charge of managing, but I’ve been at a loss of what to post sometimes. I also need a better recording setup than “Windows Screen Capture”, this might be a reason to learn DaVinci Resolve again. I’m also aware Bluesky is a lot more social and a lot less marketing-focused than Twitter, and as such an account exclusively for game news and screenshots wouldn’t get a lot of traction, but I want to have some visibility for the game, and nobody on the team understands vertical content like tiktoks, yt shorts or instagram reels. Voidskipper Some updates to Harold Voidskipper are due, but I’ve been working on Movement FPS while I figured that out. I plan on adding a pause screen, an options screen and some way to lock the cursor on the window. Everything has been implemented in the FPS project and just needs to be ported over. That being said, I did mention before that I wanted to make it into a larger game, with more bosses and more replayability. I accidentally ballooned the scope in the GDD and it would be a 6mo - 2y project, which scares me. I can’t see the game having more content (and removing the RPGMaker theme) without rebuilding it and making an effort to make a game that’s not over after two hours. And I just think I have better things to do with that time, like honing my skills for a work portifolio (frontend? backend? I’m not sure yet) or experimenting with more jam games. I will still pick up the project, especially as it’s going to be my playground for “2D combat” features I want to try and implement, but aside of a decent GDD I’ll share another day and a cloudy vision of what I want the game to be, it’s currently on pause. What’s next? I want to set aside some time to study Shaders and Game VFX in general, as well as in regards to creating those in Godot. I also want to learn about making websites but while I understand the technologies (I have made react and react native front-ends before), it still doesn’t hit me how to actually set up, test, host and share websites. Most tutorials I find just teach you how to do HTML-CSS which I already know. Will get to work on improving Harold Voidskipper so I can turn that leaf and start playing with advanced combat mechanics. And I’ll wait for Guarah to get back to work on the Movement FPS, we have lots of ideas to try still. Also, if you don’t already know, I have a Bluesky account as well, natanmaia95.bsky.social! I sprinkle updates on my projects here and there.]]></summary></entry><entry><title type="html">Gym Leader Challenge - Water Dondozo</title><link href="https://natanmaia95.github.io/blog/2024/glc-dondozo/" rel="alternate" type="text/html" title="Gym Leader Challenge - Water Dondozo"/><published>2024-08-16T00:00:00+00:00</published><updated>2024-08-16T00:00:00+00:00</updated><id>https://natanmaia95.github.io/blog/2024/glc-dondozo</id><content type="html" xml:base="https://natanmaia95.github.io/blog/2024/glc-dondozo/"><![CDATA[<p>This week I got to play in the largest card game tournament I ever went to, A Pokémon Gym Leader Challenge free-entry special, featuring a whole 40 players. For reference, I’m used to local weeklies with 16 players tops.</p> <p>For this tournament though, I’ve piloted a deck of my own invention: “30 Energy Water Dondozo”. Here’s the list at time of writing:</p> <div class="text-center"> <figure> <picture> <img src="/assets/img/posts/2024/dondozo-deck-list.png" class="post-img-fluid rounded z-depth-1" width="auto" height="auto" title="" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"><a href="https://cardboardwarriors.net/decks/30-Energy-Water-Dondozo-66beaf51dbe024ff355b93bb">Link to the Cardboard Warriors list.</a></div> <h2 id="what-a-claim-huh">What a claim, huh?</h2> <p>As far as I know I’m the only person online using this strategy in competitive GLC, at least publically. The only other deck in pokemoncard.io using Dondozo is <a href="https://pokemoncard.io/deck/water-glc-deck-94402">this one</a>, which doesn’t play into the gimmick. There’s also <a href="https://cardboardwarriors.net/decks/Dondozo.dec-6538047b73f02ef2a16d28b3">this one</a> at Cardboard Warriors that uses 30 energies but it only added Dondozo replacing Kyogre by March, around the time I had already built mine, and also says it’s not competitive. lol.</p> <p>However, I can’t say this idea is unique. Other than that earlier cardboardwarriors one, there are <a href="https://pokemoncard.io/deck-search/?cardcode=sv4-55%7C&amp;offset=0">some decks</a> in pokemoncard.io that have come to this same conclusion, either in standard or expanded. My first draft of this deck, however, is at least 5 months old at the time of writing, older than all of those, so I got that going for me.</p> <p>And, of course, the deck idea didn’t come from nothing, I’m not that smart. Decks using that Celebrations Kyogre already existed, and in fact were my main inspiration for this build.</p> <h2 id="design-process">Design Process</h2> <p>Yes, the soul of the deck can be found in this old TrickyGym video (it wouldn’t be one of my posts without a video embed).</p> <div class="embed-responsive embed-responsive-16by9"> <figure> <iframe src="https://www.youtube.com/embed/aQCJ_ul1eqE?si=DS-RIlJ6N_7WLK6A" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="caption">RIP PTCG Online.</div> <p>“Cool, there’s a Cryogonal that can get those energies for you pretty fast, and a Volcarona that sends them back to the deck. That’s really funny. Probably worthless if you open with Cryogonals and don’t get a lucky Sonia.”</p> <p>A few weeks later one of my boosters got me that quirky Dondozo. “Hmm, this looks just like that Cryogonal, but it also attacks by itself.” I wasn’t playing Standard at that time due to money limitations so I instead looked at building a GLC list, but having only one copy of each would be difficult. It still felt clunky with just Dondozo, Kyogre and Cryogonal as I had to luck out and open with two of them (everything else was energy).</p> <p>I naivelly had the non-ex Chien-Pao in the list, thinking he’s a basic that can get its own energy and hits for 120, he’s probably self-sufficient like Dondozo. Difference is, Chien-Pao discards energy on attacks so you can’t even attack repeatedly and set up your board too, you had to choose either. Later on I felt it was a liability and removed it.</p> <p>A few more weeks later, when building a Palafin list and looking for Grudge Dive Basculegion I found that Upstream Spirits Basculegion and immediately thought of that Volcarona. “Well, if I have less energy and a few trainers, for each trainer I use my deck becomes more energy, and if I recycle those energy it is all energy now”. With that thought process, I made my list with Dondozo and Cryogonal to remove cards from the deck (and Kyogre, but a bit more forceful), Basculegion accompanied by Super Rod, Energy Recycler and Brock’s Grit, as well as Stretcher and Rod to recover results of prize trades, which all would allow me to both better find energy with Dondozo and discard energy with Kyogre. <a href="https://pokemoncard.io/deck/very-silly-glc-40-energy-water-79605">The 40 Energy list</a> was born.</p> <blockquote> <p>Fun fact: “Upstream Spirits” is translated in brazillian cards as “Espiritos de Piracema”, with Piracema referring to the specific period where fish swim upstream the Paraguay river to reproduce. A huge step for localization considering it’s the same game that would translate “Light(weak) Punch” as “Light(sunlight) Punch”.</p> </blockquote> <p>The final list has been thinned down to 29 energy as my friends suggested I could include even more trainers, to further increase my actions at the first turns. It eventually worked, reducing the chances I get unlucky with a starting hand full of energy but it increased my dependancy on Basculegion reshuffling energies, and thus the need to find it via Dive Ball or Irida or Gladion.</p> <p>The chosen pokémon are very carefully selected as to avoid as many lock states as possible. Both Basculin and Vulpix exist as extra basics I can open with on turn 1 and still find my pieces. Kyogre can most likely attack during turn 3, and most decks haven’t set up by then (Water might, though). Dondozo is, again, self-sufficient and most likely takes 3-4 turns as well. Cryogonal is the worst draw possible but having his Elemental Chain be versatile enough to energize both Dondozo and Kyogre at once (preventing me from investing in one and losing it to a gust) is totally worth the tradeoff. I couldn’t find any more pokémon to include for a long while.</p> <p><em>Random Receiver</em> was a surprise find while scrolling through online shop listings of cards. Of course I dismissed Pokégear 3.0, the top 7 cards of my deck will probably have water and a few items, but this? This only stops when it hits a supporter, so it’s guaranteed to give me a random one. As a side effect it makes a for funny reveal of the gimmick before Kyogre (although twice I’ve hit a supporter as the first revealed card).</p> <p><em>Gladion</em> is absolutely required for the later 30 energy build, but still nice here, as you want to send your energies back to deck with Basculegion and missing that opportunity because it is prized is terrible. Peony could suffice but the random aspect is a put-off for some. You also absolutely need <em>Hisuian Heavy Ball</em> if you prize any of the pivotal mons and Gladion can serve as redundancy for that.</p> <p><em>Red Card</em> is actually not needed, but I just love the reactions I get from opponents when I tutor it with Irida or Green as it’s not a common card at all. Better yet, I’ve pulled it turn 1 a few times, accidentally offsetting all the extra cards I gave them to mulligans.</p> <p><em>Acerola</em> was a late inclusion for the tournament, as I removed Candice because I hadn’t used it in all my recent tests, getting all my pokémon in the field by items and stadiums before she could be useful. My thought process was, if I cape any of the two, I can recover their health easily. But with Wailord and Haxorus running free in my local meta it is more likely the opponent will OHKO you with an absurd number before you can use Acerola.</p> <h2 id="the-tournament">The Tournament</h2> <p>I already took the 30 energy deck to a smaller tournament, but we all only played 4 rounds, one of my victories was essentially me using turn 1 Red Card on my Fighting opponnent and locking him out of the game which felt unfair, and another victory from a newbie player, and my losses were against a pro player and one of my friends who already knew the deck. I felt those games didn’t prove anything, right.</p> <p>So this massive tournament was my opportunity to gather a larger sample size, to further exploit the <em>surprise factor</em> of Dondozo and simply just to play more of the deck with people other than my friends, who knew the deck front and back.</p> <p>The deck only has 5 basic pokémon so you’d expect the mulligan rates to be high (they were), but I probably lucked out this day, with two 1-mulls and one 2-mull. My opponents and results were:</p> <table> <tbody> <tr> <td>Dragon: L</td> <td>Water: W</td> <td>Water: L</td> <td>Fighting: W</td> <td>Grass: W</td> <td>Water: L</td> </tr> </tbody> </table> <p><em>Not a biased meta at all.</em></p> <p>Water really is one of the worst matchups here, as both Frosmoth and Baxcalibur can keep Cetitan, Wailord, Kyogre and even Wishiwashi well fed really quickly, and have at least 2 or three attackers set up for back-to-back trades, which I can’t afford unless my own table is fully 100% set up. There were also two Lightning decks I had the luck of not fighting against, as they have great repeatable consistency. I only won that matchup once because I used Red Card on their 4 energy after Kyogre’s snipe attack, after they used all their energy search.</p> <p>Best matchups I feel are probably Fighting and Dark, as Dark hits for very low numbers most of the time and has no Abilities to cancel, and Fighting has and equally slow setup as you but is succeptible to Red Cards and Marnies to lock them out. Fire isn’t actually a great matchup as Basculegion is the only mon to realistically take advantage of the weakness for quick KOs, but you want it to use its free attack before it dies so it’s a risky tradeoff. Dragon seems manageable as their setup is as slow as Dondozo’s so you can build your bench while they build theirs, then Dondozo for a few kills, Basculegion to shuffle energy, and finally Mallow 2 energy then Kyogre to take their big benched Stage2s away leaving them no escape.</p> <p>Actually, I pulled off the Mallow-Kyogre combo two times this evening. From all my Aqua Storms I also got one 100%, 250 damage Aqua Storm which had me and bystanders scream in surprise and awe. I try to avoid using Aqua Storm early in the game as with 30 not 40 energies it’s very likely I would discard my Basculegion and other important cards and deal no damage, so I leave it to after Basculegion has done its job (usually KO for 200+ damage).</p> <p>It was very fun seeing the reactions of players who didn’t know me nor my deck, “I lost to a 30 energy deck” and “he hit my bench for 250 on two”. Of course, I also had my fair share of suprise moments like an opp fully setting up Cetitan on turn 2 or the Dragon player using a clutch Special Charge into Guzma and Hala for the double dragon energy I couldn’t even have predicted, but those are the norm around those players.</p> <h2 id="upgrade-ideas">Upgrade Ideas</h2> <p>Some friends mentioned I should add more gust effects like Boss’s Orders. I’m reluctant to add them, as most of my Supporter cards here are actually present to either search for <em>items</em> or retrieve/recover other search supporters in a chain (like Crasher Wake into Green’s into Marnie), so I don’t get stuck with a bad hand for many turns. As such, having any of these search for Boss would tip my plan to the opponent for next turn, while cards like Gallade and Dragonite can do those as needed. I’m also not a big fan of Counter Catcher here as both Dondozo and Kyogre give me a big lead at the start, and if the enemy is winning at the start I hardly have any resources (deck issue).</p> <p>I also considered Snom and Frosmoth as Snom has “Call for Family”. In theory I could use Ice Dance to set up either Dondozo or Kyogre easier, but I’m not drawing many energies per turn (only one card per turn) so my hand often doesn’t have a lot of energy to rain, actually. However, removing Cryogonal, I could see the deck rebuilt with Frosmoth as well as Capacious Bucket, Professor’s Letter and Earthen Vessel to rain dance with, and Acerola and Penny. Raihan could work fine too, I guess, but I can’t use it whenever. Professor’s Research could work well with Frosmoth as I’d remove all items from my deck leaving my hand full of energies from Basculegion.</p> <p>Some tools that caught my attention were Heavy Baton and especially Powerglass. Baton would speed up Kyogre if I equipped Dondozo with it, and Powerglass would speed up either of the two if I had any energy discarded (and between Cycling Road and Crasher Wake I discard energy very often). Not a fan of Heavy Baton as sometimes I full-cost retreat Dondozo just so I can get extra energies to power up Basculegion, so keeping them in the game isn’t ideal. Powerglass is nice but Kyogre is fragile and could use the Luxurious Cape in most circumstances; Dondozo wants the cape against Water too.</p> <p>Finally, considering the local meta in my city loves Cetitan/Wailord and is getting around to Haxorus lists, I need to consider more Special Energy removal, like Special Hammer or Eneporter (moving to a dud mon works just as well as removing them). There’s just too many energies in those decks I can’t realistically remove all of them, and Special Charge exists. I’ll keep it in mind either way, it’s the most likely upgrade I will make.</p> <h2 id="whats-next">What’s next?</h2> <p>I want to record gameplay of this deck with me piloting it, but I don’t have a webcam setup and am not entirelu sure about how well received ptcgsim gameplay would be. I’m also not great at commentary, nor are my non-english speaking friends, so that throws a wrench on my plans. Mostly because I can’t quite explain my thought process when playing (I’m not that good of a player haha).</p> <p>People at the tournament said I was piloting the deck very well, probably due to the many moments I retreated Dondozo on purpose or used Escape Rope or Red Card when opp had search pokemon or energy to rain dance, so I do think this deck doesn’t play itself like the original 40 energy idea was supposed to be, but despite that I still got a 50% winrate so maybe the deck’s potential is capped with the current meta. Who knows.</p>]]></content><author><name></name></author><category term="personal"/><category term="tcg"/><summary type="html"><![CDATA[This week I got to play in the largest card game tournament I ever went to, A Pokémon Gym Leader Challenge free-entry special, featuring a whole 40 players. For reference, I’m used to local weeklies with 16 players tops. For this tournament though, I’ve piloted a deck of my own invention: “30 Energy Water Dondozo”. Here’s the list at time of writing: Link to the Cardboard Warriors list. What a claim, huh? As far as I know I’m the only person online using this strategy in competitive GLC, at least publically. The only other deck in pokemoncard.io using Dondozo is this one, which doesn’t play into the gimmick. There’s also this one at Cardboard Warriors that uses 30 energies but it only added Dondozo replacing Kyogre by March, around the time I had already built mine, and also says it’s not competitive. lol. However, I can’t say this idea is unique. Other than that earlier cardboardwarriors one, there are some decks in pokemoncard.io that have come to this same conclusion, either in standard or expanded. My first draft of this deck, however, is at least 5 months old at the time of writing, older than all of those, so I got that going for me. And, of course, the deck idea didn’t come from nothing, I’m not that smart. Decks using that Celebrations Kyogre already existed, and in fact were my main inspiration for this build. Design Process Yes, the soul of the deck can be found in this old TrickyGym video (it wouldn’t be one of my posts without a video embed). RIP PTCG Online. “Cool, there’s a Cryogonal that can get those energies for you pretty fast, and a Volcarona that sends them back to the deck. That’s really funny. Probably worthless if you open with Cryogonals and don’t get a lucky Sonia.” A few weeks later one of my boosters got me that quirky Dondozo. “Hmm, this looks just like that Cryogonal, but it also attacks by itself.” I wasn’t playing Standard at that time due to money limitations so I instead looked at building a GLC list, but having only one copy of each would be difficult. It still felt clunky with just Dondozo, Kyogre and Cryogonal as I had to luck out and open with two of them (everything else was energy). I naivelly had the non-ex Chien-Pao in the list, thinking he’s a basic that can get its own energy and hits for 120, he’s probably self-sufficient like Dondozo. Difference is, Chien-Pao discards energy on attacks so you can’t even attack repeatedly and set up your board too, you had to choose either. Later on I felt it was a liability and removed it. A few more weeks later, when building a Palafin list and looking for Grudge Dive Basculegion I found that Upstream Spirits Basculegion and immediately thought of that Volcarona. “Well, if I have less energy and a few trainers, for each trainer I use my deck becomes more energy, and if I recycle those energy it is all energy now”. With that thought process, I made my list with Dondozo and Cryogonal to remove cards from the deck (and Kyogre, but a bit more forceful), Basculegion accompanied by Super Rod, Energy Recycler and Brock’s Grit, as well as Stretcher and Rod to recover results of prize trades, which all would allow me to both better find energy with Dondozo and discard energy with Kyogre. The 40 Energy list was born. Fun fact: “Upstream Spirits” is translated in brazillian cards as “Espiritos de Piracema”, with Piracema referring to the specific period where fish swim upstream the Paraguay river to reproduce. A huge step for localization considering it’s the same game that would translate “Light(weak) Punch” as “Light(sunlight) Punch”. The final list has been thinned down to 29 energy as my friends suggested I could include even more trainers, to further increase my actions at the first turns. It eventually worked, reducing the chances I get unlucky with a starting hand full of energy but it increased my dependancy on Basculegion reshuffling energies, and thus the need to find it via Dive Ball or Irida or Gladion. The chosen pokémon are very carefully selected as to avoid as many lock states as possible. Both Basculin and Vulpix exist as extra basics I can open with on turn 1 and still find my pieces. Kyogre can most likely attack during turn 3, and most decks haven’t set up by then (Water might, though). Dondozo is, again, self-sufficient and most likely takes 3-4 turns as well. Cryogonal is the worst draw possible but having his Elemental Chain be versatile enough to energize both Dondozo and Kyogre at once (preventing me from investing in one and losing it to a gust) is totally worth the tradeoff. I couldn’t find any more pokémon to include for a long while. Random Receiver was a surprise find while scrolling through online shop listings of cards. Of course I dismissed Pokégear 3.0, the top 7 cards of my deck will probably have water and a few items, but this? This only stops when it hits a supporter, so it’s guaranteed to give me a random one. As a side effect it makes a for funny reveal of the gimmick before Kyogre (although twice I’ve hit a supporter as the first revealed card). Gladion is absolutely required for the later 30 energy build, but still nice here, as you want to send your energies back to deck with Basculegion and missing that opportunity because it is prized is terrible. Peony could suffice but the random aspect is a put-off for some. You also absolutely need Hisuian Heavy Ball if you prize any of the pivotal mons and Gladion can serve as redundancy for that. Red Card is actually not needed, but I just love the reactions I get from opponents when I tutor it with Irida or Green as it’s not a common card at all. Better yet, I’ve pulled it turn 1 a few times, accidentally offsetting all the extra cards I gave them to mulligans. Acerola was a late inclusion for the tournament, as I removed Candice because I hadn’t used it in all my recent tests, getting all my pokémon in the field by items and stadiums before she could be useful. My thought process was, if I cape any of the two, I can recover their health easily. But with Wailord and Haxorus running free in my local meta it is more likely the opponent will OHKO you with an absurd number before you can use Acerola. The Tournament I already took the 30 energy deck to a smaller tournament, but we all only played 4 rounds, one of my victories was essentially me using turn 1 Red Card on my Fighting opponnent and locking him out of the game which felt unfair, and another victory from a newbie player, and my losses were against a pro player and one of my friends who already knew the deck. I felt those games didn’t prove anything, right. So this massive tournament was my opportunity to gather a larger sample size, to further exploit the surprise factor of Dondozo and simply just to play more of the deck with people other than my friends, who knew the deck front and back. The deck only has 5 basic pokémon so you’d expect the mulligan rates to be high (they were), but I probably lucked out this day, with two 1-mulls and one 2-mull. My opponents and results were: Dragon: L Water: W Water: L Fighting: W Grass: W Water: L Not a biased meta at all. Water really is one of the worst matchups here, as both Frosmoth and Baxcalibur can keep Cetitan, Wailord, Kyogre and even Wishiwashi well fed really quickly, and have at least 2 or three attackers set up for back-to-back trades, which I can’t afford unless my own table is fully 100% set up. There were also two Lightning decks I had the luck of not fighting against, as they have great repeatable consistency. I only won that matchup once because I used Red Card on their 4 energy after Kyogre’s snipe attack, after they used all their energy search. Best matchups I feel are probably Fighting and Dark, as Dark hits for very low numbers most of the time and has no Abilities to cancel, and Fighting has and equally slow setup as you but is succeptible to Red Cards and Marnies to lock them out. Fire isn’t actually a great matchup as Basculegion is the only mon to realistically take advantage of the weakness for quick KOs, but you want it to use its free attack before it dies so it’s a risky tradeoff. Dragon seems manageable as their setup is as slow as Dondozo’s so you can build your bench while they build theirs, then Dondozo for a few kills, Basculegion to shuffle energy, and finally Mallow 2 energy then Kyogre to take their big benched Stage2s away leaving them no escape. Actually, I pulled off the Mallow-Kyogre combo two times this evening. From all my Aqua Storms I also got one 100%, 250 damage Aqua Storm which had me and bystanders scream in surprise and awe. I try to avoid using Aqua Storm early in the game as with 30 not 40 energies it’s very likely I would discard my Basculegion and other important cards and deal no damage, so I leave it to after Basculegion has done its job (usually KO for 200+ damage). It was very fun seeing the reactions of players who didn’t know me nor my deck, “I lost to a 30 energy deck” and “he hit my bench for 250 on two”. Of course, I also had my fair share of suprise moments like an opp fully setting up Cetitan on turn 2 or the Dragon player using a clutch Special Charge into Guzma and Hala for the double dragon energy I couldn’t even have predicted, but those are the norm around those players. Upgrade Ideas Some friends mentioned I should add more gust effects like Boss’s Orders. I’m reluctant to add them, as most of my Supporter cards here are actually present to either search for items or retrieve/recover other search supporters in a chain (like Crasher Wake into Green’s into Marnie), so I don’t get stuck with a bad hand for many turns. As such, having any of these search for Boss would tip my plan to the opponent for next turn, while cards like Gallade and Dragonite can do those as needed. I’m also not a big fan of Counter Catcher here as both Dondozo and Kyogre give me a big lead at the start, and if the enemy is winning at the start I hardly have any resources (deck issue). I also considered Snom and Frosmoth as Snom has “Call for Family”. In theory I could use Ice Dance to set up either Dondozo or Kyogre easier, but I’m not drawing many energies per turn (only one card per turn) so my hand often doesn’t have a lot of energy to rain, actually. However, removing Cryogonal, I could see the deck rebuilt with Frosmoth as well as Capacious Bucket, Professor’s Letter and Earthen Vessel to rain dance with, and Acerola and Penny. Raihan could work fine too, I guess, but I can’t use it whenever. Professor’s Research could work well with Frosmoth as I’d remove all items from my deck leaving my hand full of energies from Basculegion. Some tools that caught my attention were Heavy Baton and especially Powerglass. Baton would speed up Kyogre if I equipped Dondozo with it, and Powerglass would speed up either of the two if I had any energy discarded (and between Cycling Road and Crasher Wake I discard energy very often). Not a fan of Heavy Baton as sometimes I full-cost retreat Dondozo just so I can get extra energies to power up Basculegion, so keeping them in the game isn’t ideal. Powerglass is nice but Kyogre is fragile and could use the Luxurious Cape in most circumstances; Dondozo wants the cape against Water too. Finally, considering the local meta in my city loves Cetitan/Wailord and is getting around to Haxorus lists, I need to consider more Special Energy removal, like Special Hammer or Eneporter (moving to a dud mon works just as well as removing them). There’s just too many energies in those decks I can’t realistically remove all of them, and Special Charge exists. I’ll keep it in mind either way, it’s the most likely upgrade I will make. What’s next? I want to record gameplay of this deck with me piloting it, but I don’t have a webcam setup and am not entirelu sure about how well received ptcgsim gameplay would be. I’m also not great at commentary, nor are my non-english speaking friends, so that throws a wrench on my plans. Mostly because I can’t quite explain my thought process when playing (I’m not that good of a player haha). People at the tournament said I was piloting the deck very well, probably due to the many moments I retreated Dondozo on purpose or used Escape Rope or Red Card when opp had search pokemon or energy to rain dance, so I do think this deck doesn’t play itself like the original 40 energy idea was supposed to be, but despite that I still got a 50% winrate so maybe the deck’s potential is capped with the current meta. Who knows.]]></summary></entry><entry><title type="html">Working on Silver Daze</title><link href="https://natanmaia95.github.io/blog/2024/working-on-silver-daze/" rel="alternate" type="text/html" title="Working on Silver Daze"/><published>2024-08-09T00:00:00+00:00</published><updated>2024-08-09T00:00:00+00:00</updated><id>https://natanmaia95.github.io/blog/2024/working-on-silver-daze</id><content type="html" xml:base="https://natanmaia95.github.io/blog/2024/working-on-silver-daze/"><![CDATA[<div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/silverdaze_cover.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <h3 id="whats-a-silver-daze">What’s a “Silver Daze”?</h3> <p><em>Silver Daze</em> is a JRPG-style game with heavy influence from 2000s aesthetics in anime, retro games, music and setting. It’s a game about growing up into adulthood, letting things go, and supporting your friends. It also has really cool combat mechanics focused on customization and player expression as character fight with magical Cards which can be swapped and traded.</p> <p>Pitch aside, Silver Daze is a project headed by Sawyer Friend (yes that’s his surname), developed in RPGMaker and featuring a handful other team members, which includes myself!. This is probably the first Steam Game that I’ve been involved with from the start, which isn’t a big accomplishment but did have me learning details about making Steam builds, achievements, marketing etc.</p> <h3 id="my-role-on-the-team">My role on the team</h3> <p>Sawyer likes to work autonomously as planning for other members that might leave the team for whatever reason is not ideal to him, which does make his projects have a very “solo-dev” vibe, one Game Director person with a very strong vision for the game, handling writing, mapping, art, combat balancing and half of the game’s soundtrack, with Graves(RetroReaper) covering the other half. Still, there are things he can’t do but I can.</p> <p>My main contributions are for more technical, code-related features that serve as either QoL or improvements on systems and visuals we had on paper. For example, I made code to transfer save data from Axial - Disc 1 into Axial - Disc 2 and we’re using similar code to get demo saves into the main game without the player having to mess with the files. Similarly, we’re planning on giving the player special cards if they’re playing on Steam and have save data for games from other dev friends of ours, like <a href="https://store.steampowered.com/app/886200/EndCycle_VS/">Endcycle VS</a> and <a href="https://store.steampowered.com/app/1248840/Sephonie/">Sephonie</a>. I also implemented some of the first custom UI elements and menus we had (battle UI, card binder menu), then taught Sawyer the very basics of how to make his own edits to other screens, which lets our game stand out from other RPGMaker games a bit more. I’m also there to unscrew any bugs he creates by messing with the code himself.</p> <div class="text-center"> <figure> <picture> <img src="/assets/img/devlogs/working-silverdaze-binder.png" class="post-img-fluid rounded z-depth-1" width="auto" height="auto" title="" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption">There are hundreds of cards to collect!</div> <p>I’m also responsible for a handful of visual effects throughout the game that didn’t have community solutions at the time. I made the “shaders” for what we call <em>Foil</em> enemies, a rare modifier enemies can have that makes them drop special rare foil cards, inspired by shiny hunting in Pokémon; There are other visual modifiers for some secret enemies further in the game I’ll keep hidden for now. There are also popup messages for when passive and trigger states activate, something I really enjoyed from Fire Emblem and wanted an excuse to replicate.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-sm mt-3 mt-md-0 text-center"> <figure> <video src="/assets/video/devlogs/working-silver-daze-foils.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls="" loop=""/> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <div class="caption">Chances of finding these are pretty low.</div> <p>Outside of that, I’m also present for a few brainstorming sessions where Sawyer metaphorically sits down on any random channel on our dev Discord server and starts throwing ideas for next story chapters or card mechanics and me, Nedben and Royal can join and give opinions or new ideas. Overall, as I have a more supportive role the workload is very light and doesn’t encroach time from my other endeavors.</p> <h3 id="marketing-adventure">Marketing adventure</h3> <p>Many of Sawyer’s friends incentivized him to sell Silver Daze on Steam as we guessed the fact his last project, Axial, was free, Steam wouldn’t push it as strongly in the algorithm. He eventually caved in and we even had a little game marketing study group going on. Alongside that I also got to show early builds to a few friends to gather some basic feedback, which was pretty fun.</p> <p>Then, a surprise hit my inbox: the game developer showcase in this local, bi-yearly anime convention in my city didn’t have enough applicants so the organizer politely asked the community if they wanted to join. I dismissed it at first as I had just finished <a href="https://natanmaia95.github.io/blog/2024/working-on-fishfolk-drifty/"> working on Fish Folk - Drifty </a> and had no other projects in the pipeline, but then a friend told me I should take Silver Daze to the venue as I was technically a dev and nobody could contest that. I checked with Sawyer, he gave me his OK, then I went to design and print a poster and a few pamphlets (something the other devs at the con forgot to do until I showed up packed with pretty posters).</p> <div class="col mt-3"> <div class="row-3 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/working_silverdaze_con_1.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="row-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/working_silverdaze_con_2.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="row-3 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/working_silverdaze_con_3.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">The convention had me a bit anxious but I pulled through!</div> <p>I spent Friday and Saturday at the venue, meeting fellow devs, playtesting their games, as well as receiving and discussing with strangers about Silver Daze and the games market in Brazil in general. I made sure to borrow a set of headphones as Sawyer and Graves put a lot of care into the soundtrack and I wanted at the very least the title screen and boss songs to be heard. I also distributed a total of 30 pamphlets, rookie numbers compared to another experienced dev I met but definitely a good start.</p> <p>For results… We got 8 wishlists the entire weekend 🤡</p> <p>It was the first convention I attended as a dev, and I did learn a lot of stuff. With a game that sells itself on nostalgia and older aesthetics as much as it sells itself on its own merits, my target audience shows up around the dev venue around late afternoon, while school kids who mostly play on phones are the visitors during the morning. I, of course, stayed my first and second days in the morning and early afternoon, and took the late afternoon for my own break. I wanted to do it correctly on the Sunday but I got sick the midnight before, so I couldn’t really test that hypothesis. I’m sure all the pamphlets did help our wishlist rates not fall all the way to zero for a few weeks. I hope so.</p> <p>The event still had me left a few dozen pamphlets and a handful of posters, so I put the posters up around specific blocks in my university I knew had students that match our target audience (so, computer science, digital arts and games courses), as well as giving the pamphlets to a dozen friends.</p> <h3 id="we-have-a-demo">We have a demo!</h3> <p>Yeah, uh, due diligence from a dev team member and all, we’re launching Silver Daze’s public demo on August the 10th! It will be available on both Steam and Itch.io, and we plan on hosting it on Newgrounds too. You can play the browser builds on your phone as well. If a retro JRPG with teens and cool card battles sounds interesting please check it out!</p> <p><a href="https://store.steampowered.com/app/3097590/Silver_Daze_Demo/">Link to demo on Steam</a> </p>]]></content><author><name></name></author><category term="devlog"/><summary type="html"><![CDATA[What’s a “Silver Daze”? Silver Daze is a JRPG-style game with heavy influence from 2000s aesthetics in anime, retro games, music and setting. It’s a game about growing up into adulthood, letting things go, and supporting your friends. It also has really cool combat mechanics focused on customization and player expression as character fight with magical Cards which can be swapped and traded. Pitch aside, Silver Daze is a project headed by Sawyer Friend (yes that’s his surname), developed in RPGMaker and featuring a handful other team members, which includes myself!. This is probably the first Steam Game that I’ve been involved with from the start, which isn’t a big accomplishment but did have me learning details about making Steam builds, achievements, marketing etc. My role on the team Sawyer likes to work autonomously as planning for other members that might leave the team for whatever reason is not ideal to him, which does make his projects have a very “solo-dev” vibe, one Game Director person with a very strong vision for the game, handling writing, mapping, art, combat balancing and half of the game’s soundtrack, with Graves(RetroReaper) covering the other half. Still, there are things he can’t do but I can. My main contributions are for more technical, code-related features that serve as either QoL or improvements on systems and visuals we had on paper. For example, I made code to transfer save data from Axial - Disc 1 into Axial - Disc 2 and we’re using similar code to get demo saves into the main game without the player having to mess with the files. Similarly, we’re planning on giving the player special cards if they’re playing on Steam and have save data for games from other dev friends of ours, like Endcycle VS and Sephonie. I also implemented some of the first custom UI elements and menus we had (battle UI, card binder menu), then taught Sawyer the very basics of how to make his own edits to other screens, which lets our game stand out from other RPGMaker games a bit more. I’m also there to unscrew any bugs he creates by messing with the code himself. There are hundreds of cards to collect! I’m also responsible for a handful of visual effects throughout the game that didn’t have community solutions at the time. I made the “shaders” for what we call Foil enemies, a rare modifier enemies can have that makes them drop special rare foil cards, inspired by shiny hunting in Pokémon; There are other visual modifiers for some secret enemies further in the game I’ll keep hidden for now. There are also popup messages for when passive and trigger states activate, something I really enjoyed from Fire Emblem and wanted an excuse to replicate. Chances of finding these are pretty low. Outside of that, I’m also present for a few brainstorming sessions where Sawyer metaphorically sits down on any random channel on our dev Discord server and starts throwing ideas for next story chapters or card mechanics and me, Nedben and Royal can join and give opinions or new ideas. Overall, as I have a more supportive role the workload is very light and doesn’t encroach time from my other endeavors. Marketing adventure Many of Sawyer’s friends incentivized him to sell Silver Daze on Steam as we guessed the fact his last project, Axial, was free, Steam wouldn’t push it as strongly in the algorithm. He eventually caved in and we even had a little game marketing study group going on. Alongside that I also got to show early builds to a few friends to gather some basic feedback, which was pretty fun. Then, a surprise hit my inbox: the game developer showcase in this local, bi-yearly anime convention in my city didn’t have enough applicants so the organizer politely asked the community if they wanted to join. I dismissed it at first as I had just finished working on Fish Folk - Drifty and had no other projects in the pipeline, but then a friend told me I should take Silver Daze to the venue as I was technically a dev and nobody could contest that. I checked with Sawyer, he gave me his OK, then I went to design and print a poster and a few pamphlets (something the other devs at the con forgot to do until I showed up packed with pretty posters). The convention had me a bit anxious but I pulled through! I spent Friday and Saturday at the venue, meeting fellow devs, playtesting their games, as well as receiving and discussing with strangers about Silver Daze and the games market in Brazil in general. I made sure to borrow a set of headphones as Sawyer and Graves put a lot of care into the soundtrack and I wanted at the very least the title screen and boss songs to be heard. I also distributed a total of 30 pamphlets, rookie numbers compared to another experienced dev I met but definitely a good start. For results… We got 8 wishlists the entire weekend 🤡 It was the first convention I attended as a dev, and I did learn a lot of stuff. With a game that sells itself on nostalgia and older aesthetics as much as it sells itself on its own merits, my target audience shows up around the dev venue around late afternoon, while school kids who mostly play on phones are the visitors during the morning. I, of course, stayed my first and second days in the morning and early afternoon, and took the late afternoon for my own break. I wanted to do it correctly on the Sunday but I got sick the midnight before, so I couldn’t really test that hypothesis. I’m sure all the pamphlets did help our wishlist rates not fall all the way to zero for a few weeks. I hope so. The event still had me left a few dozen pamphlets and a handful of posters, so I put the posters up around specific blocks in my university I knew had students that match our target audience (so, computer science, digital arts and games courses), as well as giving the pamphlets to a dozen friends. We have a demo! Yeah, uh, due diligence from a dev team member and all, we’re launching Silver Daze’s public demo on August the 10th! It will be available on both Steam and Itch.io, and we plan on hosting it on Newgrounds too. You can play the browser builds on your phone as well. If a retro JRPG with teens and cool card battles sounds interesting please check it out! Link to demo on Steam]]></summary></entry><entry><title type="html">Working on Fish Folk - Drifty</title><link href="https://natanmaia95.github.io/blog/2024/working-on-fishfolk-drifty/" rel="alternate" type="text/html" title="Working on Fish Folk - Drifty"/><published>2024-05-28T00:00:00+00:00</published><updated>2024-05-28T00:00:00+00:00</updated><id>https://natanmaia95.github.io/blog/2024/working-on-fishfolk-drifty</id><content type="html" xml:base="https://natanmaia95.github.io/blog/2024/working-on-fishfolk-drifty/"><![CDATA[<p>I didn’t update the blog too much these past months as most of my time was dedicated to bigger projects I couldn’t share too much about. However, this one in particular is getting a public reveal as I write this post so they gave me an OK to talk about it.</p> <p><em>Fish Folk: Drifty</em> is a kart racer with a half retro half cartoon aesthetic where little fish people drive funny bikes in pretty underwater environments. For the past few months I’ve been sponsored by Erlend of <a href="https://github.com/spicylobstergames">Spicy Lobster</a> to make a prototype for what a racing game with their characters would look like, which could be used as a starting point for a Kickstarter campaign or a self funded project.</p> <div class="embed-responsive embed-responsive-16by9"> <figure> <iframe src="https://www.youtube.com/embed/SD3Mbme7IyQ?si=7pyitKmQ-hkBSe97" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <p>Making it into a commercial game is not part of my job, as this is supposed to be a proof-of-concept for a possible crowdfunding campaign, but it did mean I could explore aspects I hadn’t time to for my last racing game <a href="https://nateplays95.github.io/projects/project_nitro/">Project Nitro</a>, such as design and AI, which was great. I also managed to get my friend <a href="https://www.artstation.com/paulohncostaart">Paulo Costa</a> in to do the models and animations alongside the existing assets from other contributors of Spicy Lobster.</p> <h3 id="game-design">Game Design</h3> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/working-fishfolk-drifty-0.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <p>By Erlend’s writing, Fish Folk games are supposed to be “really easy to play; no prior gaming experience required”, so the best reference material I picked is Mario Kart 8 Deluxe, one of Nintendo’s best selling games ever and for a reason. It has vibrant colorful visuals, an amazing live recorded soundtrack, strong “pick-up-and-play” design and a surprising amount of accessibility features for a japanese game. Me and my friends and relatives have poured hundreds of hours in that game’s splitscreen mode, and it was worth every penny, and capturing that quality and solidity into a project of mine is one of my goals here.</p> <p>One of the aspects he also mentioned is “modding”, which I sadly don’t understand enough to capture in this prototype, but having seen amazing racing games which do feature modding, like Sonic Roboblast 2 Kart (which itself is a mod of a mod!), as well as the thriving community of custom tracks in games like Trackmania and Mario Kart Wii, I think there’s loads of potential to make such a game fresh and fun for a long time, as long as the base design and controls are great by themselves.</p> <p>However, my approach in choosing what aspects to borrow and what to reinvent from other games was very conservative, as with the timeframe I had for this project, I didn’t really want to experiment with more unusual ideas that I had a hunch would take a lot to make work. So while I embraced some of the ideas Erlend suggested for mechanics, like drivers having a “balance meter” that let them take a few hits before flipping over, or being able to kick your opponents to drive them off-course, some ideas had me worried. One of the ideas pitched was drivers having to attack either stationary objects or little creatures on the track to get their items, and not only do I think that would make races more complicated than just focusing on <em>driving</em> and <em>item usage</em>, in my head it sounds very clunky as new players would be able to miss getting any items, and as drivers attack to their sides not the front, you’d have a think window to adjust your racing line and press the button. I instead went with simple item boxes for now.</p> <h3 id="physics">Physics</h3> <p>Although I could just have ported the racing physics I had at the start, I first tried to implement simplified versions of it, to better fit the arcade-y nature of the Fish Folk games as well as fit the bike handling a bit better. All my attempts of using CharacterBody3D failed miserably 😰. I then investigated code from my older projects and discovered Project Nitro had so many artificial constraints to keep the car from tumbling over (cars will rotate back to being straight up with time) that I could just build a car with two wheels. This does mean the new vehicles don’t enjoy going over half pipes or loop-de-loops but we don’t really need those for the track designs, so it’s fine.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/working-fishfolk-drifty-2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <p>Basing the driving model around constrained physics instead of fake physics does mean sometimes the bikes will still try to react like rigidbodies in conditions I haven’t accounted for, like pushing up walls or bouncing on stuff, but if all those situations can be recognized you can just apply more constraints to account for them. For example, the bikes would usually bounce off the floor after a big jump, which didn’t let you immediately drive forwards, so I addressed it by adding a second StaticBody below the bike with an <em>absorbent</em> physics material which would remove 90% of the bounce from the jump and let the bike keep driving right after landing.</p> <h3 id="component-systems">Component Systems</h3> <p>I’ve often felt a bit lost when trying to figure the architecture of many of the game’s systems. By not having tutorials to follow it all feels like uncharted territory, and I’d say that’s one of the fun parts of software development in general, but it does have its ups and downs.</p> <p>Godot is great at supporting composition-based architectures, so I experimented with that. Karts have different components to control animations, input and item use, which all could be swapped for different systems. But then I didn’t actually have different systems to swap between outside the inputs and the progress trackers, so that wasn’t a major selling point. Not shown here, but I actually think Godot groups work better than classes to determine if a certain node has a certain component, just because you can assign groups freely and quickly filter your tree with <code class="language-plaintext highlighter-rouge">get_nodes_in_group</code>.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/working-fishfolk-drifty-3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <p>I also gave up and delegated some of the logic to famous “Manager scripts”, for stuff like ranking karts according to race progress. I still have “components” to each track that individually handle spawning the karts, doing camera fly-arounds and managing checkpoints if there are any, but the Manager coordinates all of them. Overall, I think composition in Godot is worth studying, because it can lead to very powerful systems for more content-centric games, but a project like this can use some hard-coded aspects just fine.</p> <h3 id="cpu-drivers">CPU Drivers</h3> <p>This time I wanted to expand on what I did in Project Nitro and research how to implement non-player drivers, if at least to serve as powerup fodder, but mostly to liven up the prototype and to introduce the vehicular combat mechanics like balance and the melee attacks. I <a href="https://github.com/fishfolk/drifty/wiki/Technical:-Driver-AI">wrote a lot about my knowledge on AI-controlled drivers in racing games so far</a> for future reference, but implementation is on the simpler side, especially since I haven’t yet studied artificial intelligence formally at the time of writing.</p> <p>In summary, if a vehicle has an AI driver assigned to it, it can look at the track’s assigned racing path, project the vehicle’s current position onto it, look at the position a few meters ahead, and steer the vehicle left or right as needed. For sharp turns they also decelerate. This does have the side effect of making all drivers follow a single line through the course, for which a good fix hasn’t come to me yet.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/working-fishfolk-drifty-1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <p>I also intend on placing a few sensors to each side of the kart so they won’t stick to each other unless they intend to attack other drivers, and they especially avoid any possible walls on the track.</p> <h3 id="the-business-side">The Business Side</h3> <p>I’m not one to talk much about numbers and contracts but I’m not under any NDAs this time so I might as well do.</p> <p>Erlend approached me via email after seeing both Project Nitro’s file on Github, as well as reading my blog post on it. I guess there just aren’t many open sourced racing game projects over there, I guess. We talked further via Discord, and his proposal was: he had a budget of 3000 dollars to develop a prototype of what a racing game with the Fish Folk would look like, and he could pay both Paulo and I $250 each for six months, and we’d work at what we deemed a reasonable rate for that value. For me, I deemed 8 hours a week for $250 was both around minimum wage in Brazil and enough work to fit with my schedule as a student.</p> <p>It seemed like a great deal, as I did want an opportunity to expand on Project Nitro and research other aspects I ignored before, and I could work with Paulo as an artist. The only problem left was to estimate if I could balance the project with my studies, and for that Erlend suggested we first do a month to see if I can fit the project in my routine and reassess from there. I did, wasn’t too much of a struggle to fit, so I accepted the deal. I also closed in on getting paid after each month’s over, which my father later warned me against, but Erlend made all the payments on time so I hadn’t much to worry this time.</p> <h3 id="challenges">Challenges</h3> <p>One of my biggest barriers during this period was probably how <em>technical debt</em> started getting to me, as there were less things I could port over from Project Nitro and more things I had to research for myself. Not knowing exactly when to use and not to use composition also didn’t help much. I had to redo some aspects like input and rankings and have yet to redo powerups as I first wanted a quick proof-of-concept, but then other systems required those to be more versatile and as such, refactoring was needed. I mentioned the spaghetti code aready.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/working-fishfolk-drifty-4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <div class="caption">I feel this image describes my experience well. Maybe that's why they call it spaghetti code?</div> <p>I also had to learn alongside Paulo how to make a reasonable workflow for both designing and modelling the race track, and during that process not only did I let Paulo draw the course layout while I implemented other systems, but he also finished a lot of the track’s assets before I tested the road and offroad sections, and as such I didn’t have the courage to ask for some tweaks I felt would improve the track later on because both his modelling and my importing and collision matching were taking longer than I wanted to. As such, some curves ended up a bit wonky and there’s an empty uphill straight I didn’t know how to spice up gameplay-wise.</p> <p>In an ideal world, the artist would do concepts for the track’s theme, then the designer would sketch the layout, and then <em>someone</em> would graybox the layout and test and polish all the corners and sections before details are added. While I do have my own methods for grayboxing and modelling those tracks, not only am I not an expert, but other artists I know aren’t familiar with a few methods I use (like matching road slices to paths, or joining tris manually like it’s 1998). The graybox step is also important for making different geometries for <em>physics</em> and <em>visuals</em>, as often the collision shapes can be and often should be much simpler than their ingame models, for both game performance and physics predictability. This time around we didn’t do grayboxes but our models aren’t too complex so we used their original geometry for collisions too, as well as some invisible walls.</p> <p>The last challenge was probably balancing development consistency after a routine change: some university classes were temporarily paralyzed for a few months halfway through the semester. This had me working on Drifty as well as some long-term uni assignments at home, which broke my well established routine and, with most of my friends either living far away or being workaholics like me, brought my day-to-day much closer to the 2020 status quo of being stuck at home with little social interaction or work discipline. Barely being a <em>pandemic kid</em>, I did not enjoy this, but tried to work it out anyway. I felt my productivity going way down, which had me feeling guilty about sitting to work on the racing game and not making much progress from research. Addressing that is an ongoing process which I have to deal with myself.</p> <h3 id="closing-thoughts">Closing Thoughts</h3> <p>I haven’t finished my time with Drifty yet, there’s a lot I’m still working on, but I do want to leave the project with a bunch of documentation, both on design and technical aspects so any future contributors aren’t majorly lost (my ugly code doesn’t help matters though haha). Another post about this project is planned, too.</p> <p>I had an amazing time working on this project, it was very fulfilling and a great learning opportunity, I look forward to how this project will grow in the future, if the people at Spicy Lobster will take it somewhere, if they’ll make something unique.</p> <p><a href="https://github.com/fishfolk/drifty">Here’s the link to the Github repo</a> if you wanna play or contribute to the project yourself. </p>]]></content><author><name></name></author><category term="devlog"/><summary type="html"><![CDATA[I didn’t update the blog too much these past months as most of my time was dedicated to bigger projects I couldn’t share too much about. However, this one in particular is getting a public reveal as I write this post so they gave me an OK to talk about it. Fish Folk: Drifty is a kart racer with a half retro half cartoon aesthetic where little fish people drive funny bikes in pretty underwater environments. For the past few months I’ve been sponsored by Erlend of Spicy Lobster to make a prototype for what a racing game with their characters would look like, which could be used as a starting point for a Kickstarter campaign or a self funded project. Making it into a commercial game is not part of my job, as this is supposed to be a proof-of-concept for a possible crowdfunding campaign, but it did mean I could explore aspects I hadn’t time to for my last racing game Project Nitro, such as design and AI, which was great. I also managed to get my friend Paulo Costa in to do the models and animations alongside the existing assets from other contributors of Spicy Lobster. Game Design By Erlend’s writing, Fish Folk games are supposed to be “really easy to play; no prior gaming experience required”, so the best reference material I picked is Mario Kart 8 Deluxe, one of Nintendo’s best selling games ever and for a reason. It has vibrant colorful visuals, an amazing live recorded soundtrack, strong “pick-up-and-play” design and a surprising amount of accessibility features for a japanese game. Me and my friends and relatives have poured hundreds of hours in that game’s splitscreen mode, and it was worth every penny, and capturing that quality and solidity into a project of mine is one of my goals here. One of the aspects he also mentioned is “modding”, which I sadly don’t understand enough to capture in this prototype, but having seen amazing racing games which do feature modding, like Sonic Roboblast 2 Kart (which itself is a mod of a mod!), as well as the thriving community of custom tracks in games like Trackmania and Mario Kart Wii, I think there’s loads of potential to make such a game fresh and fun for a long time, as long as the base design and controls are great by themselves. However, my approach in choosing what aspects to borrow and what to reinvent from other games was very conservative, as with the timeframe I had for this project, I didn’t really want to experiment with more unusual ideas that I had a hunch would take a lot to make work. So while I embraced some of the ideas Erlend suggested for mechanics, like drivers having a “balance meter” that let them take a few hits before flipping over, or being able to kick your opponents to drive them off-course, some ideas had me worried. One of the ideas pitched was drivers having to attack either stationary objects or little creatures on the track to get their items, and not only do I think that would make races more complicated than just focusing on driving and item usage, in my head it sounds very clunky as new players would be able to miss getting any items, and as drivers attack to their sides not the front, you’d have a think window to adjust your racing line and press the button. I instead went with simple item boxes for now. Physics Although I could just have ported the racing physics I had at the start, I first tried to implement simplified versions of it, to better fit the arcade-y nature of the Fish Folk games as well as fit the bike handling a bit better. All my attempts of using CharacterBody3D failed miserably 😰. I then investigated code from my older projects and discovered Project Nitro had so many artificial constraints to keep the car from tumbling over (cars will rotate back to being straight up with time) that I could just build a car with two wheels. This does mean the new vehicles don’t enjoy going over half pipes or loop-de-loops but we don’t really need those for the track designs, so it’s fine. Basing the driving model around constrained physics instead of fake physics does mean sometimes the bikes will still try to react like rigidbodies in conditions I haven’t accounted for, like pushing up walls or bouncing on stuff, but if all those situations can be recognized you can just apply more constraints to account for them. For example, the bikes would usually bounce off the floor after a big jump, which didn’t let you immediately drive forwards, so I addressed it by adding a second StaticBody below the bike with an absorbent physics material which would remove 90% of the bounce from the jump and let the bike keep driving right after landing. Component Systems I’ve often felt a bit lost when trying to figure the architecture of many of the game’s systems. By not having tutorials to follow it all feels like uncharted territory, and I’d say that’s one of the fun parts of software development in general, but it does have its ups and downs. Godot is great at supporting composition-based architectures, so I experimented with that. Karts have different components to control animations, input and item use, which all could be swapped for different systems. But then I didn’t actually have different systems to swap between outside the inputs and the progress trackers, so that wasn’t a major selling point. Not shown here, but I actually think Godot groups work better than classes to determine if a certain node has a certain component, just because you can assign groups freely and quickly filter your tree with get_nodes_in_group. I also gave up and delegated some of the logic to famous “Manager scripts”, for stuff like ranking karts according to race progress. I still have “components” to each track that individually handle spawning the karts, doing camera fly-arounds and managing checkpoints if there are any, but the Manager coordinates all of them. Overall, I think composition in Godot is worth studying, because it can lead to very powerful systems for more content-centric games, but a project like this can use some hard-coded aspects just fine. CPU Drivers This time I wanted to expand on what I did in Project Nitro and research how to implement non-player drivers, if at least to serve as powerup fodder, but mostly to liven up the prototype and to introduce the vehicular combat mechanics like balance and the melee attacks. I wrote a lot about my knowledge on AI-controlled drivers in racing games so far for future reference, but implementation is on the simpler side, especially since I haven’t yet studied artificial intelligence formally at the time of writing. In summary, if a vehicle has an AI driver assigned to it, it can look at the track’s assigned racing path, project the vehicle’s current position onto it, look at the position a few meters ahead, and steer the vehicle left or right as needed. For sharp turns they also decelerate. This does have the side effect of making all drivers follow a single line through the course, for which a good fix hasn’t come to me yet. I also intend on placing a few sensors to each side of the kart so they won’t stick to each other unless they intend to attack other drivers, and they especially avoid any possible walls on the track. The Business Side I’m not one to talk much about numbers and contracts but I’m not under any NDAs this time so I might as well do. Erlend approached me via email after seeing both Project Nitro’s file on Github, as well as reading my blog post on it. I guess there just aren’t many open sourced racing game projects over there, I guess. We talked further via Discord, and his proposal was: he had a budget of 3000 dollars to develop a prototype of what a racing game with the Fish Folk would look like, and he could pay both Paulo and I $250 each for six months, and we’d work at what we deemed a reasonable rate for that value. For me, I deemed 8 hours a week for $250 was both around minimum wage in Brazil and enough work to fit with my schedule as a student. It seemed like a great deal, as I did want an opportunity to expand on Project Nitro and research other aspects I ignored before, and I could work with Paulo as an artist. The only problem left was to estimate if I could balance the project with my studies, and for that Erlend suggested we first do a month to see if I can fit the project in my routine and reassess from there. I did, wasn’t too much of a struggle to fit, so I accepted the deal. I also closed in on getting paid after each month’s over, which my father later warned me against, but Erlend made all the payments on time so I hadn’t much to worry this time. Challenges One of my biggest barriers during this period was probably how technical debt started getting to me, as there were less things I could port over from Project Nitro and more things I had to research for myself. Not knowing exactly when to use and not to use composition also didn’t help much. I had to redo some aspects like input and rankings and have yet to redo powerups as I first wanted a quick proof-of-concept, but then other systems required those to be more versatile and as such, refactoring was needed. I mentioned the spaghetti code aready. I feel this image describes my experience well. Maybe that's why they call it spaghetti code? I also had to learn alongside Paulo how to make a reasonable workflow for both designing and modelling the race track, and during that process not only did I let Paulo draw the course layout while I implemented other systems, but he also finished a lot of the track’s assets before I tested the road and offroad sections, and as such I didn’t have the courage to ask for some tweaks I felt would improve the track later on because both his modelling and my importing and collision matching were taking longer than I wanted to. As such, some curves ended up a bit wonky and there’s an empty uphill straight I didn’t know how to spice up gameplay-wise. In an ideal world, the artist would do concepts for the track’s theme, then the designer would sketch the layout, and then someone would graybox the layout and test and polish all the corners and sections before details are added. While I do have my own methods for grayboxing and modelling those tracks, not only am I not an expert, but other artists I know aren’t familiar with a few methods I use (like matching road slices to paths, or joining tris manually like it’s 1998). The graybox step is also important for making different geometries for physics and visuals, as often the collision shapes can be and often should be much simpler than their ingame models, for both game performance and physics predictability. This time around we didn’t do grayboxes but our models aren’t too complex so we used their original geometry for collisions too, as well as some invisible walls. The last challenge was probably balancing development consistency after a routine change: some university classes were temporarily paralyzed for a few months halfway through the semester. This had me working on Drifty as well as some long-term uni assignments at home, which broke my well established routine and, with most of my friends either living far away or being workaholics like me, brought my day-to-day much closer to the 2020 status quo of being stuck at home with little social interaction or work discipline. Barely being a pandemic kid, I did not enjoy this, but tried to work it out anyway. I felt my productivity going way down, which had me feeling guilty about sitting to work on the racing game and not making much progress from research. Addressing that is an ongoing process which I have to deal with myself. Closing Thoughts I haven’t finished my time with Drifty yet, there’s a lot I’m still working on, but I do want to leave the project with a bunch of documentation, both on design and technical aspects so any future contributors aren’t majorly lost (my ugly code doesn’t help matters though haha). Another post about this project is planned, too. I had an amazing time working on this project, it was very fulfilling and a great learning opportunity, I look forward to how this project will grow in the future, if the people at Spicy Lobster will take it somewhere, if they’ll make something unique. Here’s the link to the Github repo if you wanna play or contribute to the project yourself.]]></summary></entry><entry><title type="html">Godot - making polygon colliders from AnimatedSprite2D</title><link href="https://natanmaia95.github.io/blog/2024/animated-sprite-polygon-godot4/" rel="alternate" type="text/html" title="Godot - making polygon colliders from AnimatedSprite2D"/><published>2024-03-05T00:00:00+00:00</published><updated>2024-03-05T00:00:00+00:00</updated><id>https://natanmaia95.github.io/blog/2024/animated-sprite-polygon-godot4</id><content type="html" xml:base="https://natanmaia95.github.io/blog/2024/animated-sprite-polygon-godot4/"><![CDATA[<div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/poly_animsprite_fox1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <p>I made a little tool script that can generate polygon shapes for Area2D nodes for each frame of an AnimatedSprite2D, and make those areas active and inactive at runtime. It is based on a few assumptions, like your AnimatedSprite2D doesn’t use offsets and your AtlasTextures don’t use margins, but I’m sure those would be easy to add in if needed.</p> <p>The road to it was a bit bumpy, though. It has been a while since I made it so I don’t rememeber all the details but I still want to share my journey, as well as the tool’s code.</p> <h3 id="context">Context</h3> <p>In January I took some time off to learn a bit more about multiplayer games in Godot by making a fighting game (er, following a tutorial that is). Fighting games are pretty complex so a tutorial could be a good primer, and I already made some action games before so that knowledge could translate here too.</p> <p>I like Super Smash Bros so I was very inclined to follow <a href="https://www.youtube.com/watch?v=FKMBkZsPCCA&amp;list=PLeJDGeZe3by2tQIJmCZfaSRl95cot070t">this tutorial series by Apano</a>. There are a few design patterns I don’t totally agree with but it’s very serviceable. I promptly implemented everything and had fun with how smooth it felt. Just one problem: the tutorial used the character’s solid collision square box as the damage hurtbox, which meant it couldn’t quite reflect the different sprites. It also meant, for the game to be juicy, you had to exaggerate the attack hitboxes which would further highlight the problem.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/poly_animsprite_fox2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <p>Side note: I didn’t have a second controller to test multiplayer, but I’ve since learned Godot can recognize virtual controllers from <em>Parsec</em>. It has been my favorite way to test multiplayer games. I’m not being paid to say this (unfortunately) but it’s pretty cool.</p> <h3 id="research">Research</h3> <p>TheShaggyDev is one of my favorite Godot creators as he dives deep into his design process for code and project structure, and many of his projects align with my likes. I was delighted to know he had made a video on getting polygon shapes (for static colliders) from Sprite2D nodes.</p> <div class="embed-responsive embed-responsive-16by9"> <figure> <iframe src="https://www.youtube.com/embed/Btk8IzhvaDo?si=YIluHglNY37pbH3S" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="caption">There's also a text version linked in the video's description.</div> <p>That’s cool and all, but how would I do that for every frame in an AnimatedSprite2D? I couldn’t generate the polygons at runtime as the algorithm is pretty slow, so I would need to generate one shape for each frame, then activate and deactivate them at runtime. I needed to make a tool script that would generate all my polygons when I ticked a checkbox (in the lack of tool script buttons).</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">run_tool</span><span class="p">():</span>
	<span class="k">var</span> <span class="n">anim_sprite</span> <span class="p">:</span><span class="o">=</span> <span class="n">get_parent</span><span class="p">()</span> <span class="k">as</span> <span class="n">AnimatedSprite2D</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">anim_sprite</span><span class="p">:</span>
		<span class="n">push_error</span><span class="p">(</span><span class="s2">"Parent is not AnimatedSprite2D"</span><span class="p">)</span>
        <span class="k">return</span>

	<span class="n">hurtbox_dict</span> <span class="o">=</span> <span class="p">{}</span>
	
	<span class="k">var</span> <span class="n">bitmap</span> <span class="p">:</span> <span class="n">BitMap</span>
	<span class="k">var</span> <span class="n">current_texture</span> <span class="p">:</span> <span class="n">Texture2D</span>
	
	<span class="k">var</span> <span class="n">old_hurtboxes</span> <span class="o">=</span> <span class="n">get_parent</span><span class="p">()</span><span class="o">.</span><span class="n">get_parent</span><span class="p">()</span><span class="o">.</span><span class="n">get_node_or_null</span><span class="p">(</span><span class="s2">"Hurtboxes"</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">old_hurtboxes</span><span class="p">:</span>
		<span class="n">old_hurtboxes</span><span class="o">.</span><span class="n">queue_free</span><span class="p">()</span>
	
	<span class="k">var</span> <span class="n">results_node</span> <span class="p">:</span><span class="o">=</span> <span class="n">Node2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
	<span class="n">anim_sprite</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">results_node</span><span class="p">)</span>
	<span class="n">results_node</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
	<span class="n">results_node</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Hurtboxes"</span>
	<span class="n">hurtboxes_path</span> <span class="o">=</span> <span class="n">get_path_to</span><span class="p">(</span><span class="n">results_node</span><span class="p">)</span>
</code></pre></div></div> <p>Now I just had to find the sprite’s texture as it was shown on the AnimatedSprite2D, and make polygons from that. How hard could it be? It’s probably right there in the documentation, right?</p> <h3 id="getting-the-frames-texture">Getting the frame’s texture.</h3> <p>Most of my frames were imported as AtlasTextures for brevity’s sake and to not bloat each character’s folder with a hundred files; if I had each frame separately I could probably used ShaggyDev’s aproach by using a simple Sprite2D and changing its frame to another file for each shape. Following that approach approach of getting the texture directly wouldn’t work with AnimatedSprite2D as there was no one single texture for the entire animation; each frame of each animation can have a texture taken from a separate file, or an atlas made from a file, or even a blank texture.</p> <p>For a long time I tried creating a new <em>viewport</em>, rendering the AnimatedSprite2D there, saving the <em>render texture</em> and using that, but in retrospect even if it worked, it wouldn’t have accounted for different sizes in sprite frames… I wish I had commited every single attempt just to look back on them, because I had some really absurd ideas. I’m not even sure if it every rendered anything, although I remember getting a polygon from an entirely unrelated section of the Atlas.</p> <p><i>Eventually, I found: Texture2D SpriteFrames.get_frame_texture(anim: StringName, idx: int). It’s in the documentation.</i></p> <p>So that was a relief. I just needed to make an image from it… wait, why is it blank? For whatever reason (and without breakpoints for tool scripts it took a whole morning to find out) the generated texture when converted to a bitmap wouldn’t show as a cut-up region of its AtlasTexture during the tool’s execution. It was entirely blank. I tied to print the “region” field but it was all 0,0. I couldn’t figure out why for another long period of time.</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">sprite_frames</span> <span class="p">:</span> <span class="n">SpriteFrames</span> <span class="o">=</span> <span class="n">anim_sprite</span><span class="o">.</span><span class="n">sprite_frames</span>
<span class="k">for</span> <span class="n">animation_name</span> <span class="ow">in</span> <span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_animation_names</span><span class="p">():</span>
    <span class="n">anim_sprite</span><span class="o">.</span><span class="n">animation</span> <span class="o">=</span> <span class="n">animation_name</span>
    
    <span class="k">for</span> <span class="n">frame_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_frame_count</span><span class="p">(</span><span class="n">animation_name</span><span class="p">)):</span>
        <span class="n">anim_sprite</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame_index</span>
        
        <span class="n">bitmap</span> <span class="o">=</span> <span class="n">BitMap</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
        <span class="n">current_texture</span> <span class="o">=</span> <span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_frame_texture</span><span class="p">(</span><span class="n">animation_name</span><span class="p">,</span> <span class="n">frame_index</span><span class="p">)</span>
</code></pre></div></div> <p>My final solution was to get the atlas and make it into an image, as before. I finally found the AtlasTexture “region” field which this time had actual values in it. Then, the fruit of another half an hour of reading documentation I found code Image.get_region(Rect2Di region) and the region field in the atlas texture worked. Wheww. There’s also a tweak for if the source is an entire file or blank.</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># inside the inner for loop</span>
<span class="k">if</span> <span class="n">current_texture</span> <span class="k">is</span> <span class="n">AtlasTexture</span><span class="p">:</span>
    <span class="k">var</span> <span class="n">img</span> <span class="o">=</span> <span class="n">current_texture</span><span class="o">.</span><span class="n">atlas</span><span class="o">.</span><span class="n">get_image</span><span class="p">()</span><span class="o">.</span><span class="n">get_region</span><span class="p">(</span><span class="n">current_texture</span><span class="o">.</span><span class="n">region</span><span class="p">)</span>
    <span class="n">bitmap</span><span class="o">.</span><span class="n">create_from_image_alpha</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span> <span class="c1"># file or blank</span>
    <span class="n">bitmap</span><span class="o">.</span><span class="n">create_from_image_alpha</span><span class="p">(</span><span class="n">current_texture</span><span class="o">.</span><span class="n">get_image</span><span class="p">())</span>
</code></pre></div></div> <h3 id="finishing-the-tool">Finishing the tool</h3> <p>Now I just needed to generate the polygons. At first I wanted just one Area2D and one polygon per frame, but if the sprite had separate sections that wouldn’t add into a single shape they would be skipped. Instead, I have an Area2D for each frame, which can hold multiple polygons if needed. I’m also adding all the node references for each area into a dictionary to avoid excessive get_node calls.</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># inside the inner for loop as well</span>
<span class="k">var</span> <span class="n">polys</span> <span class="o">=</span> <span class="n">bitmap</span><span class="o">.</span><span class="n">opaque_to_polygons</span><span class="p">(</span><span class="n">Rect2i</span><span class="p">(</span><span class="kt">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">bitmap</span><span class="o">.</span><span class="n">get_size</span><span class="p">()),</span> <span class="n">epsilon</span><span class="p">)</span>

<span class="k">var</span> <span class="n">area</span> <span class="o">=</span> <span class="n">Area2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<span class="n">results_node</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">area</span><span class="p">)</span>
<span class="n">area</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
<span class="n">area</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"</span><span class="si">%s</span><span class="s2">_</span><span class="si">%d</span><span class="s2">"</span> <span class="o">%</span> <span class="p">[</span><span class="n">animation_name</span><span class="p">,</span> <span class="n">frame_index</span><span class="p">]</span>
<span class="n">hurtbox_dict</span><span class="p">[</span><span class="n">area</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">get_path_to</span><span class="p">(</span><span class="n">area</span><span class="p">)</span>

<span class="k">for</span> <span class="n">poly</span> <span class="ow">in</span> <span class="n">polys</span><span class="p">:</span>
    <span class="k">var</span> <span class="n">collision_polygon</span> <span class="o">=</span> <span class="n">CollisionPolygon2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
    <span class="n">collision_polygon</span><span class="o">.</span><span class="n">polygon</span> <span class="o">=</span> <span class="n">poly</span>
    <span class="n">collision_polygon</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="o">-</span><span class="n">bitmap</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span> <span class="c1"># assume centered</span>
    <span class="n">collision_polygon</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">true</span>
    <span class="n">collision_polygon</span><span class="o">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">false</span>
    <span class="n">area</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">collision_polygon</span><span class="p">)</span>
    <span class="n">collision_polygon</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/poly_animsprite_fox1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <div class="caption">Each area has a name matching an animation and a frame index.</div> <h3 id="updating-during-runtime">Updating during runtime</h3> <p>The helper node also has functions to be executed at runtime. Currently it waits for signals from the AnimatedSprite2D node, but I’m not sure if it introduces a physics frame of delay or not. Alternatively you could run update_shape inside _physics_process.</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">update_shape</span><span class="p">():</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">hurtboxes_node</span><span class="p">:</span> <span class="k">return</span>
    <span class="c1"># disable everything</span>
	<span class="k">for</span> <span class="n">inactive_hurtbox</span> <span class="p">:</span> <span class="n">Area2D</span> <span class="ow">in</span> <span class="n">hurtboxes_node</span><span class="o">.</span><span class="n">get_children</span><span class="p">():</span>
		<span class="n">disable_area</span><span class="p">(</span><span class="n">inactive_hurtbox</span><span class="p">)</span>
    <span class="c1"># enable the active one searching the dict</span>
	<span class="k">var</span> <span class="n">active_hurtbox</span> <span class="o">=</span> <span class="n">get_node</span><span class="p">(</span><span class="n">hurtbox_dict</span><span class="p">[</span><span class="s2">"</span><span class="si">%s</span><span class="s2">_</span><span class="si">%d</span><span class="s2">"</span> <span class="o">%</span> <span class="p">[</span><span class="n">current_animation</span><span class="p">,</span> <span class="n">current_frame</span><span class="p">]])</span>
	<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">active_hurtbox</span><span class="o">.</span><span class="n">get_children</span><span class="p">():</span>
		<span class="n">col</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">false</span>
		<span class="n">col</span><span class="o">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">true</span>
	<span class="n">active_hurtbox</span><span class="o">.</span><span class="n">scale</span> <span class="o">=</span> <span class="kt">Vector2</span><span class="p">(</span>
			<span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">flip_h</span> <span class="k">else</span> <span class="mi">1</span><span class="p">,</span> 
			<span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">flip_v</span> <span class="k">else</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <h3 id="code">Code</h3> <p>Here’s the entire code for this tool. It is a Node2D that should be inserted as a child of the AnimatedSprite2D to animate, and it will handle changing the hurtboxes at runtime too.</p> <div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">@</span><span class="k">tool</span>
<span class="k">extends</span> <span class="n">Node2D</span>
<span class="c1">## poly_animsprite_helper.gd</span>


<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">epsilon</span> <span class="p">:</span> <span class="kt">float</span> <span class="o">=</span> <span class="mf">1.0</span>

<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">generate</span> <span class="p">:</span> <span class="kt">bool</span> <span class="o">=</span> <span class="bp">false</span> <span class="p">:</span>
	<span class="n">set</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
		<span class="k">if</span> <span class="n">Engine</span><span class="o">.</span><span class="n">is_editor_hint</span><span class="p">():</span> <span class="n">run_tool</span><span class="p">()</span>
		<span class="n">generate</span> <span class="o">=</span> <span class="n">value</span>

<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">hurtbox_dict</span> <span class="p">:</span> <span class="kt">Dictionary</span> <span class="o">=</span> <span class="p">{}</span>
<span class="err">@</span><span class="k">export</span> <span class="k">var</span> <span class="n">hurtboxes_path</span> <span class="p">:</span> <span class="kt">NodePath</span>

<span class="k">var</span> <span class="n">current_animation</span> <span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s2">""</span>
<span class="k">var</span> <span class="n">current_frame</span> <span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">var</span> <span class="n">animated_sprite</span> <span class="p">:</span> <span class="n">AnimatedSprite2D</span>
<span class="k">var</span> <span class="n">hurtboxes_node</span> <span class="p">:</span> <span class="n">Node2D</span>


<span class="k">func</span> <span class="nf">_ready</span><span class="p">():</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">Engine</span><span class="o">.</span><span class="n">is_editor_hint</span><span class="p">():</span>
		<span class="n">animated_sprite</span> <span class="o">=</span> <span class="n">get_parent</span><span class="p">()</span>
		<span class="n">animated_sprite</span><span class="o">.</span><span class="n">animation_changed</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">_on_animation_changed</span><span class="p">)</span>
		<span class="n">animated_sprite</span><span class="o">.</span><span class="n">frame_changed</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">_on_frame_changed</span><span class="p">)</span>
		<span class="n">hurtboxes_node</span> <span class="o">=</span> <span class="n">get_node</span><span class="p">(</span><span class="n">hurtboxes_path</span><span class="p">)</span>


<span class="k">func</span> <span class="nf">_on_animation_changed</span><span class="p">():</span>
	<span class="n">current_animation</span> <span class="o">=</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">animation</span>
	<span class="n">current_frame</span> <span class="o">=</span> <span class="mi">0</span>
	<span class="n">update_shape</span><span class="p">()</span>


<span class="k">func</span> <span class="nf">_on_frame_changed</span><span class="p">():</span>
	<span class="n">current_frame</span> <span class="o">=</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">frame</span>
	<span class="n">update_shape</span><span class="p">()</span>


<span class="k">func</span> <span class="nf">update_shape</span><span class="p">():</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">hurtboxes_node</span><span class="p">:</span> <span class="k">return</span>
	<span class="k">for</span> <span class="n">inactive_hurtbox</span> <span class="p">:</span> <span class="n">Area2D</span> <span class="ow">in</span> <span class="n">hurtboxes_node</span><span class="o">.</span><span class="n">get_children</span><span class="p">():</span>
		<span class="n">disable_area</span><span class="p">(</span><span class="n">inactive_hurtbox</span><span class="p">)</span>
	
	<span class="k">var</span> <span class="n">active_hurtbox</span> <span class="o">=</span> <span class="n">get_node</span><span class="p">(</span><span class="n">hurtbox_dict</span><span class="p">[</span><span class="s2">"</span><span class="si">%s</span><span class="s2">_</span><span class="si">%d</span><span class="s2">"</span> <span class="o">%</span> <span class="p">[</span><span class="n">current_animation</span><span class="p">,</span> <span class="n">current_frame</span><span class="p">]])</span>
	<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">active_hurtbox</span><span class="o">.</span><span class="n">get_children</span><span class="p">():</span>
		<span class="n">col</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">false</span>
		<span class="n">col</span><span class="o">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">true</span>
	<span class="n">active_hurtbox</span><span class="o">.</span><span class="n">scale</span> <span class="o">=</span> <span class="kt">Vector2</span><span class="p">(</span>
			<span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">flip_h</span> <span class="k">else</span> <span class="mi">1</span><span class="p">,</span> 
			<span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">animated_sprite</span><span class="o">.</span><span class="n">flip_v</span> <span class="k">else</span> <span class="mi">1</span><span class="p">)</span>


<span class="k">func</span> <span class="nf">disable_area</span><span class="p">(</span><span class="n">area</span><span class="p">:</span><span class="n">Area2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>
	<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">area</span><span class="o">.</span><span class="n">get_children</span><span class="p">():</span>
		<span class="n">col</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">true</span>
		<span class="n">col</span><span class="o">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">false</span>


<span class="k">func</span> <span class="nf">run_tool</span><span class="p">():</span>
	<span class="k">var</span> <span class="n">anim_sprite</span> <span class="p">:</span><span class="o">=</span> <span class="n">get_parent</span><span class="p">()</span> <span class="k">as</span> <span class="n">AnimatedSprite2D</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">anim_sprite</span><span class="p">:</span>
		<span class="n">push_error</span><span class="p">(</span><span class="s2">"Parent is not AnimatedSprite2D"</span><span class="p">)</span>
		<span class="k">return</span>
	
	<span class="n">hurtbox_dict</span> <span class="o">=</span> <span class="p">{}</span>
	
	<span class="k">var</span> <span class="n">bitmap</span> <span class="p">:</span> <span class="n">BitMap</span>
	<span class="k">var</span> <span class="n">current_texture</span> <span class="p">:</span> <span class="n">Texture2D</span>
	
	<span class="k">var</span> <span class="n">old_hurtboxes</span> <span class="o">=</span> <span class="n">get_parent</span><span class="p">()</span><span class="o">.</span><span class="n">get_parent</span><span class="p">()</span><span class="o">.</span><span class="n">get_node_or_null</span><span class="p">(</span><span class="s2">"Hurtboxes"</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">old_hurtboxes</span><span class="p">:</span>
		<span class="n">old_hurtboxes</span><span class="o">.</span><span class="n">queue_free</span><span class="p">()</span>
	
	<span class="k">var</span> <span class="n">results_node</span> <span class="p">:</span><span class="o">=</span> <span class="n">Node2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
	<span class="n">anim_sprite</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">results_node</span><span class="p">)</span>
	<span class="n">results_node</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
	<span class="n">results_node</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"Hurtboxes"</span>
	<span class="n">hurtboxes_path</span> <span class="o">=</span> <span class="n">get_path_to</span><span class="p">(</span><span class="n">results_node</span><span class="p">)</span>
	
	<span class="k">var</span> <span class="n">sprite_frames</span> <span class="p">:</span> <span class="n">SpriteFrames</span> <span class="o">=</span> <span class="n">anim_sprite</span><span class="o">.</span><span class="n">sprite_frames</span>
	<span class="k">for</span> <span class="n">animation_name</span> <span class="ow">in</span> <span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_animation_names</span><span class="p">():</span>
		<span class="n">anim_sprite</span><span class="o">.</span><span class="n">animation</span> <span class="o">=</span> <span class="n">animation_name</span>
		
		<span class="k">for</span> <span class="n">frame_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_frame_count</span><span class="p">(</span><span class="n">animation_name</span><span class="p">)):</span>
			<span class="n">anim_sprite</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame_index</span>
			
			<span class="n">bitmap</span> <span class="o">=</span> <span class="n">BitMap</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
			<span class="n">current_texture</span> <span class="o">=</span> <span class="n">sprite_frames</span><span class="o">.</span><span class="n">get_frame_texture</span><span class="p">(</span><span class="n">animation_name</span><span class="p">,</span> <span class="n">frame_index</span><span class="p">)</span>
			
			<span class="k">if</span> <span class="n">current_texture</span> <span class="k">is</span> <span class="n">AtlasTexture</span><span class="p">:</span>
				<span class="k">var</span> <span class="n">img</span> <span class="o">=</span> <span class="n">current_texture</span><span class="o">.</span><span class="n">atlas</span><span class="o">.</span><span class="n">get_image</span><span class="p">()</span><span class="o">.</span><span class="n">get_region</span><span class="p">(</span><span class="n">current_texture</span><span class="o">.</span><span class="n">region</span><span class="p">)</span>
				<span class="n">bitmap</span><span class="o">.</span><span class="n">create_from_image_alpha</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
			<span class="k">else</span><span class="p">:</span>
				<span class="n">bitmap</span><span class="o">.</span><span class="n">create_from_image_alpha</span><span class="p">(</span><span class="n">current_texture</span><span class="o">.</span><span class="n">get_image</span><span class="p">())</span>
			
			
			<span class="k">var</span> <span class="n">polys</span> <span class="o">=</span> <span class="n">bitmap</span><span class="o">.</span><span class="n">opaque_to_polygons</span><span class="p">(</span><span class="n">Rect2i</span><span class="p">(</span><span class="kt">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">bitmap</span><span class="o">.</span><span class="n">get_size</span><span class="p">()),</span> <span class="n">epsilon</span><span class="p">)</span>
			<span class="nb">print</span><span class="p">(</span><span class="n">animation_name</span><span class="p">,</span> <span class="s2">"_"</span><span class="p">,</span> <span class="n">frame_index</span><span class="p">,</span> <span class="s2">" "</span><span class="p">,</span> <span class="n">polys</span><span class="p">)</span>
			
			<span class="k">var</span> <span class="n">area</span> <span class="o">=</span> <span class="n">Area2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
			<span class="n">results_node</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">area</span><span class="p">)</span>
			<span class="n">area</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
			<span class="n">area</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"</span><span class="si">%s</span><span class="s2">_</span><span class="si">%d</span><span class="s2">"</span> <span class="o">%</span> <span class="p">[</span><span class="n">animation_name</span><span class="p">,</span> <span class="n">frame_index</span><span class="p">]</span>
			<span class="n">hurtbox_dict</span><span class="p">[</span><span class="n">area</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">get_path_to</span><span class="p">(</span><span class="n">area</span><span class="p">)</span>
			
			<span class="k">for</span> <span class="n">poly</span> <span class="ow">in</span> <span class="n">polys</span><span class="p">:</span>
				<span class="k">var</span> <span class="n">collision_polygon</span> <span class="o">=</span> <span class="n">CollisionPolygon2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
				<span class="n">collision_polygon</span><span class="o">.</span><span class="n">polygon</span> <span class="o">=</span> <span class="n">poly</span>
				<span class="n">collision_polygon</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="o">-</span><span class="n">bitmap</span><span class="o">.</span><span class="n">get_size</span><span class="p">()</span><span class="o">/</span><span class="mi">2</span>
				<span class="n">collision_polygon</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="bp">true</span>
				<span class="n">collision_polygon</span><span class="o">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">false</span>
				<span class="n">area</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">collision_polygon</span><span class="p">)</span>
				<span class="n">collision_polygon</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">get_tree</span><span class="p">()</span><span class="o">.</span><span class="n">edited_scene_root</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">On building a Pokémon TCG Cube</title><link href="https://natanmaia95.github.io/blog/2024/on-building-a-pokemon-tcg-cube/" rel="alternate" type="text/html" title="On building a Pokémon TCG Cube"/><published>2024-02-06T00:00:00+00:00</published><updated>2024-02-06T00:00:00+00:00</updated><id>https://natanmaia95.github.io/blog/2024/on-building-a-pokemon-tcg-cube</id><content type="html" xml:base="https://natanmaia95.github.io/blog/2024/on-building-a-pokemon-tcg-cube/"><![CDATA[<div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/fotocubo1.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <p>I’ve been on a Pokémon TCG craze for almost a year now, both as a way to bond with my friends, as well as to satisfy my “strategy-game” neurons with something a little more physical. My project for last year was building a Cube for Cube Draft, and today I wanna share a bit of how I got to build one and some of my design considerations.</p> <p>I should first explain some terms for those unfamiliar with “cubes” in trading card games:</p> <ul> <li> <p>Draft: A play format where instead of using pre-assembled decks, players open card packs or “boosters” and have to build a deck from the random selection of cards they obtained, alongside some extras like resource cards. Not only are there very peculiar rules for drafting cards with a group of people, but games like Magic the Gathering have entire card sets built with the drafting or “Limited Format” experience in mind.</p> </li> <li> <p>Cube: from the MtG community, a “cube” is a collection of cards, usually over 300, stored in a container for the purpose of building “homemade boosters” for a draft experience that doesn’t require buying new boosters every time. Cubes were initially made out of bulk cards from someone’s collection but they can also be assembled very meticulously.</p> </li> </ul> <h2 id="how-did-i-get-here">How did I get here?</h2> <p>My journey with cubing started just after my first pre-release event for Pokémon TCG. These work like a soft-drafting experience, with each player receiving two randomly-chosen half-decks from a set of four options, as well as a handful of boosters for the “deckbuilding” part. So you could find an extra attacker or supporter for the deck you received, or multiple cards of another color to pivot the deck into another direction, or even a powerful “rulebox” card that may help flip the scales in a difficult matchup and ask you to change your deck to better support it.</p> <div class="row mt-3"> <div class="col-3 mt-3 mt-md-0"></div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/prereleasereboot1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-3 mt-3 mt-md-0"></div> </div> <div class="caption">I finished the tournament in third place by the way!</div> <p>After that, though, I had a hundred cards, pokémon trainer and energy alike, that I didn’t have any use for. I also had a few cards from opening boosters so now my box of spare cards was really heavy. I wondered what to do with all those fun cards. I also really really wanted to play more draft, but had used all my money for that month.</p> <p>Then I found this video on drafting pokémon cards by TheJWittz.</p> <div class="embed-responsive embed-responsive-16by9"> <figure> <iframe src="https://www.youtube.com/embed/_l9-FJZj3V0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="caption">I fell in love with cube draft.</div> <p>I watched videos on playing and even building cubes, for both MtG and Pokémon, and grew incredibly excited to have this very “board game-y” experience of sitting down with friends for a few hours and playing something I had a hand in building. As someone who loves making games and art and loves doing group activities that’s the best thing I never thought I needed.</p> <p>I then got all the cards I had, bought a few more bulks from other players to get all the energy colors, and started assembling my own cube. Month by month I expanded my collection, buying cards for the sole purpose of adding them to the cube and experimenting with them. Cards that would hardly see any play elsewhere but could fit nicely in a cardset I have complete control of and can balance accordingly. A few months later I finally got a group of friends to play the cube draft for the first time, and we had a lot of fun!</p> <h2 id="my-design-process-for-the-cube">My Design Process for the Cube</h2> <p>I ended up with a ~400 card cube, which supports up to 8 players. I wanted to include all the 11 types from pokémon’s recent history, which meant including a very decent count of cards for each. Players build decks of 40 cards, with roughly 12 pokémon, so to support at least three players including any one type in their decks as half their type support I’d need close to 20 pokémon. We do 3 boosters (sets of 15 random cards) at a time, with each booster taking around 10 minutes to draft completely. I considered opening 4 boosters for better deckbuilding but so far I felt a fourth booster would drag the building process for too long and leave less time for playing the decks.</p> <p>At first I just picked enough cards of each type from my bulk, as well as very cheap supporter cards I bought from stores, just to complete 360 cards. I then kept an eye for cool and unusual cards in other people’s binders I could include in the cube. Cards like Charizard and Tyranitar and Pikachu were included less because of their power and utility and more because there’s this “fantasy” of battling with cool and popular pokémon I wanted to capture. I made sure to include both cute and cool mons in each type, so that newer players could discover new favorites and older players could have fresh experiences from other formats.</p> <p>Then, as the cube started to take shape, I looked for very specific cards to better balance specific strategies or archetypes, like a few Switch cards, mons that buy cards and accelerate energy, a few Cynthias and Pokémon Fan Clubs to add consistency to decks, and some Super Rods and Energy Retrievals to extend deck life. Eventually some of the mons I got from my bulk went back to the bulk, and I did buy many more cards I ended up not using, but at this point I’m way too invested to bother.</p> <p>Buying a handful of cards every month wasn’t a massive monetary investment or anything, and it meant I could continuously engage with building the cube even after the hyperfixation had passed. Of course, I also did simulated drafts with myself and played casually with my cousins before getting to what I’d consider a “balanced” state.</p> <div class="row mt-3"> <div class="col-3 mt-3 mt-md-0"></div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/fotocubo3.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-3 mt-3 mt-md-0"></div> </div> <div class="caption">It's much harder to both balance and randomize 11 color attributes.</div> <h4 id="mutant-evolution">Mutant Evolution</h4> <p>This rule allows any Stage1 mon to evolve from any Basic mon from the same type, same for Stage2 cards. Normal Evolution rules still apply. It was made to address how wonky and limiting the evolution rules for the TCG actually are for deckbuilding, and helps the game feel more closely match the ones from MtG and in particular the new Digimon TCG, while still including a variety of pokémon of each type. Otherwise, a three hundred card cube would only have two or three evo lines and that’s boring.</p> <p>Yes, this means you can evolve a Mewtwo into a Kirlia, or a Tynamo into an Electivire. It’s a very interesting rule that would be strongly abused in official formats, but it can be deliberate in a cube setting. As such, I made sure each type had a good assortment of powerful Basic and Stage1 pokemon, one or two legendaries (and a fair number of bad pokémon too haha).</p> <h4 id="pokémon-proportions">Pokémon Proportions</h4> <p>Each pokémon type is represented by 24 monsters, with a spread of roughly 12 Basic, 9 Stage1 and 3 Stage2 cards. It may feel unbalanced at first, with other cubes having less drastic proportions, but the Mutant Evolution rule allows for very powerful cards in the Basic and Stage1 groups, so each type ends up having 8 or so chase cards, as well as some neat support cards.</p> <p>Roughly a third to half of the pokémon carry abilities, as a good amount of cards came from card bulk so of course they wouldn’t have useful abilities. It also gave me room to include interesting effects tied to pokémon moves, like energy acceleration from deck, or switching out the opponent’s active mon, or doing massive damage with added recoil.</p> <p>Even with the spread biased towards basic pokémon, some players said they had really bad luck finding basics for their initial evolution picks. I first assumed it was a mix of bad deckbuilding and bad booster luck, but a third factor I only later noticed was how biased the type selection between players was. Three players started to chase Fairy cards for the novelty of a now dead type, and the only decks running Fire and Water cards were newer players with less experience which ended up making decks with 4 energy types.</p> <h4 id="trainer-support">Trainer Support</h4> <p>The recommended spread of trainers cards is roughly half the cube, so from 3 packs of 15 you potentially have ~22 trainers to choose from to build a deck of 40 which should have roughly 10-15 trainers. From my last playsession though, either I miscounted or the suffle was really unlucky but I felt a distinct lack of trainer cards from my picks. It’s a fine balance; too few and games feel unflexible and players stay stuck with bricked hands for too long, too many and players can’t find decent pokémon of their chase type in a sea of pokéballs and vitality bands and nurse joys.</p> <p>At first I was going to solely add generic and flexible trainers every deck could use like Switch and Boss’s Orders, I felt games would end up too unpredictable due to trainers, and I’d like the surprises and gotcha moments to come from the mons themselves. Still, I left some of those powerful trainers for keen-eyed veterans to look out for.</p> <p>Instead, I included less “meta” cards for Standard but which could still be useful with the lower power level, like Energy Retrieval or Pokémon Center Lady, which have come in handy in a few matches. I also included both type-specific support, trying to keep at least 3 or 4 cards including supporters, items and tools to help each type. There are also cards that see little to no use in constructed pokémon tcg formats but can be played around with here, like cards to make both pokémon confused or cards to re-roll coin tosses or cards to look at your opponent’s hand.</p> <p>Also, in a limited format without “big basic” rulebox mons and <em>very limited</em> options for switching out, strategies around Status Effects are valid. I made sure to include a handful of mons with those effects, as well as tools and supporters to both apply and remove them easily. There are also many pokémon and stadiums that deal more damage if the target has an effect, or increase the potency of that effect. Healing is also a valid strategy now, as health pools are smaller and attacks weaker, so I included heal supporters and items. Finally, the limited card pool means those powerful effects printed onto cards balanced by ending your turn early like Kiawe and Boost Shake are actually usable, as turns tend to be slower from the lack of staple supporters and basic pokémon with powerful setup abilities.</p> <h4 id="encouraging-type-mixing">Encouraging Type-mixing</h4> <p>Between having to support 11 entire types instead of the usual 5 or 6 attributes in other TCGs, and having to deal with multiple players also chasing cards of the same type, players will inevitably end up making decks with at least two types. I personally think building around 3 basic energy types is the usual, 2 is an achievement and 4 is less than desirable. Having more types can help you escape out of unfavorable weakness matchups as well as combine synergistic effects.</p> <p>At least half the types have one pokémon with entirely colorless attack costs, and all have pokémon with many colorless costs in their attacks. By making these costs achievable with any energy color, Pokémon makes these cards more “mixable” with other types, maybe to balance weaker attacks with versatility, or to incentivize using Special or Double colorless energy (a trick I also do, with as many as 6 double colorless in the cube so far). There are still cards with no colorless costs; these are usually more powerful to combat the lesser flexibility both by their original design intention and by my own selection.</p> <p>Pokémon can also be mixable with their effects, by affecting pokémon outside their type. This is especially fun with Basic pokémon as they can then be included in any deck and be useful with the only caveat being they may take the place of another basic that could be used for evolution. In counterpart, pokémon with really powerful effects (like deck search, rain dance or healing) are usually limited to supporting only their own type, which is an interesting deckbuilding consideration.</p> <div class="row mt-3"> <div class="col-1 mt-3 mt-md-0"></div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/en_US-Promo_SWSH-SWSH232-charmander.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/sv1_en_031-1.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/en_US-Promo_SWSH-SWSH221-cyndaquil.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-1 mt-3 mt-md-0"></div> </div> <div class="caption">You can see how, despite having similar attacks, Charmander's effect is exclusive to fire types while Cyndaquil's can be used in any deck.</div> <p>Some cards can also encourage type mixing by design, either by adding extra effects if different energy is equipped like more damage or applying status, or by interacting with effects their type is not normally associated with like fire types applying poison or using venoshock, or even by outright requiring different energies to pay attack costs, like most Dragon-type mons.</p> <p>Also, Mutant Evolution introduces a fun flavor of mixing: cross-type evolution lines. I made sure to include many lines that change type when evolving as if to encourage players to build around those types to have better consistency, like fairy azurill to water marill or grass scyther to steel scizor or fire salandit to poison salazzle or dragon zweilous to dark hydreigon etc etc. Building a deck with both grass and metal cards means grass Scyther can be another valid path to your Stage2 metal Metagross, which is not only fun during deckbuilding but also a fun clutch play for you and a surprise for your opponent. Having more colorless costs further helps cross-type evolution.</p> <h4 id="power-balancing-including-both-fairy-and-dragon-together">Power Balancing; including both Fairy and Dragon together</h4> <p>Even just looking at the Black/White cards and forward, there are major differences in power from 10 years of continuously making and selling new cards. Where a Tyranitar from early 2010s would deal 150 damage with four or five energy, a Tyranitar from 2023 does 230 with only two energy. While I made sure to give every type a similar distribution of new and old cards, with famously weaker types like fighting getting a helping hand, and for the most part avoiding many 2023 cards, I didn’t shy of including straight up worse and better cards inside a single type.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/en_US-XY10-056-tyranitar.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/sv2_en_135.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"> </div> </div> <div class="caption">I still included the old Tyranitar in the cube because its Raging Roar ability seems really hype and fun.</div> <p>I think part of building a draft experience is making obviously good cards to alleviate some choice paralysis and reward each good picks from boosters, and making bad cards that may afterwards get people thinking “can I still salvage this?..”, which is very much part of the fun in building your deck on the spot.</p> <p>The Fairy type, even during its run, famously had low HP pools and lower attack power, instead focusing on support and healing, situational effects even in this cube. Adressing it was simple enough, I made sure to pick the strongest fairy cards I could find, with Xerneas accelerating energy, Shiinotic searching other fairy mon, Togekiss doing mass healing, Florges decreasing attack costs (compensating for the weak attacks lol), and the infamous “Wages of Fluff” Whimsicott allowing the next attack to take extra prizes.</p> <p>As for the Dragon type, it was completely absent in the TCG for the Sword and Shield era for almost two years, so there’s a gap in power between Sun and Moon dragons and Scarlet and Violet dragons. At first I wanted to include solely basic dragons with either full colorless costs like Drampa or interesting abilities like Regidrago, as evolving into a different dragon with wildly different costs felt bad, but I then embraced the idea of dragon types as these “splashable” mons into two or three type decks, with powerful attacks as encouragement to build decks around their type requirements.</p> <p>Dragons are designed with the mindset of locking away powerful attacks with less consistent energy requirements, and I want to follow this balance. While I did include Rainbow energy and Double Dragon energy, there are only one copy of each, as rare chase cards. Dragon types from the Black and White and XY era were too weak for their energy costs, so I’m choosing the Stage2 cards from the newer sets as you need to both evolve AND match the correct energy types. As such, it’s the only type I didn’t feel bad stacking very powerful cards from Scarlet and Violet like Dragonite doing 180 damage with two energy: if a player drafts this card they might consider building a water+lightning deck just to enable it, and I think that’s fun.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/en_US-BW9-083-dragonite.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/sv3-5_en_149_std.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"> </div> </div> <div class="caption">Old dragon cards are not even worth including, I think.</div> <h2 id="maintenance">Maintenance</h2> <p>I had close to 600 cards counting all the energy cards players have available to build the decks. As such, I needed some sort of container to store and transport those cards, and card sleeves to both protect the cards and help with shuffling during playtime and re-sorting the collection. Actually decent options for either of those would each ask me more money than I invested in the entire cube, so for now I cheaped out to get something playable.</p> <p>For storage, I’m using a spare cardboard box from a pair of sandals we bought. Lucky me the cards are a very tight fit so they don’t shake around too much, and the box fits in my travel pouch neatly. It’s just cardboard though, so I’m using elastic bands to hold it shut. For sleeves, I went with those “penny sleves”, cheap transparent sleeves sold in packs of 100 for 3 dollars or less. They’re not all equally sized and some have funky finishing at the edges, but they were affordable in bulk and both protect the foils well enough and make shuffling actually possible, so that’s enough for now.</p> <div class="row mt-3"> <div class="col-2 mt-3 mt-md-0"></div> <div class="col-8 mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/posts/2024/fotocubo2.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-2 mt-3 mt-md-0"></div> </div> <div class="caption">"Professionals have standards."</div> <p>As for shuffling the four-hundred or so cards to make boosters, I usually do it at home after a playsession (or after making tweaks), it’s kinda relaxing. Randomly shuffling a deck is simple enough, just cut and mash the cards together a few times, but this cube is the size of 7 standard decks so that’s a no-go. Luckily, I found <a href="https://nex3.medium.com/how-to-randomize-a-cube-8efc20bd87ae">this article by Natalie Weizenbaum</a> detailing how she tackles the problem.</p> <p>In sum, first place all your cards in equally sized piles (I like to do 12 or 16 piles myself), which doesn’t randomize the cards by itself, but helps with the next step: thoroughly shuffle all the individual piles. Then stack those piles and repeat the process a few times. Personally I feel it’s random enough after 2 or 3 steps, but each step takes around 10 minutes at a lax pace. Funny enough, if you place an equal amount of cards of each type in each pile, shuffling only once may actually lead to a less random but more balanced distribution of colors per booster. I still need to try that out, though.</p> <h2 id="final-thoughts">Final Thoughts</h2> <p>I wish there was a practical way to both make a cube-list for pokémon online and to export it for testing in, say, Tabletop Simulator. At the time of writing I just discovered <a href="https://pokemoncard.io/cube/">the Cube Draft section in pokemoncard.io’s website</a>, it’s fairly hidden. It can’t export to TTS but there’s a beta feature for drafting with friends from the browser and creating a decklist to use in something like LimitlessTCG. I might set a free weekend to port my physical cube to the website.</p> <p>I’ve heard some people rent their Magic cubes for others to play, so I could look into that to kinda recoup my costs or invest in better storage, but for now I can barely even get my friends to play the cube, so asking them for both their time and money would feel really bad. As I mentioned at the start, I like to treat the Cube draft similarly to a board gaming night with Munchkin or D&amp;D oneshots or other games that require a long time commitment and a close group of friends. Something I can use to spice an otherwise boring travel weekend or downtime in an anime convention.</p> <h1 id="update">Update</h1> <p>I ported the cube over to the PokemonCard website! I’m 90% sure it’s not missing any cards amongst the 470. The cube experience is a bit buggy but you can simulate a draft with friends on the website, then send the cards to the pokemoncard deckbuilder, and from there send to wherever you want to play on.</p> <p>Here’s the link: <a href="https://pokemoncard.io/cube/view-cube/71">https://pokemoncard.io/cube/view-cube/71</a> To play, “Clone” the cube to your account and from your cube collection you can play it.</p>]]></content><author><name></name></author><category term="tcg"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Plans for 2024!</title><link href="https://natanmaia95.github.io/blog/2024/plans-for-2024/" rel="alternate" type="text/html" title="Plans for 2024!"/><published>2024-01-08T00:00:00+00:00</published><updated>2024-01-08T00:00:00+00:00</updated><id>https://natanmaia95.github.io/blog/2024/plans-for-2024</id><content type="html" xml:base="https://natanmaia95.github.io/blog/2024/plans-for-2024/"><![CDATA[<p>2024 is upon us, and with a new year come new year’s resolutions of course! Of course, I’ve set myself the usuals like going to the gym or writing more blog posts, but I specifically want to share what I have in mind for my dev projects this year.</p> <p>First off, I want to study how to handle Local Multiplayer (as in couch multiplayer) in Godot. Growing up with the PS2 and Xbox 360 I’ve always been a massive fan of split-screen and party games, and even to this day I love games like Smash Bros or Towerfall. So far the most flexible solution I’ve seen is making <em>input maps for every single controller port</em>. Shy of making my own controller input plugin, that’s what I’ll have to use for now. I’ve also come to appreciate Parsec for testing multiplayer games as, with Godot not recognizing my Joy-Cons via bluetooth, using parsec is the best way for me to get extra controllers connected.</p> <p>In addition, I’m also an assistant programmer in a local dev team working on a visual novel. Not sure how much I can share just yet, but we’ll be taking it to some small gaming and anime conventions nearby, and that’s a first for me. Project Nitro was tested by mostly colleagues and acquaintances, but this time we’ll be getting feedback from complete strangers, and not gonna lie but it makes me a bit anxious haha.</p> <p>Finally, 2024 might be my last year as an undergraduate, and that means I’ll soon need to think about my course completion work. As a computer science student, it will probably be some sort of research paper, but on what topic I’m not sure. I could use my previous projects in driving simulation as a starting point on machine learning drivers like Drivatars, or shift into artificial life simulations like The Sims games, but there’s still a lot of time to figure that out.</p> <p>My plan for the blog is to make at least one post per month. Writing these is not inherently rewarding but I still want to document my journey. I also need to update my projects page, and maybe add smaller sections like mods and tabletop games. You’ll be hearing from me soon! 💫</p>]]></content><author><name></name></author><category term="personal"/><summary type="html"><![CDATA[2024 is upon us, and with a new year come new year’s resolutions of course! Of course, I’ve set myself the usuals like going to the gym or writing more blog posts, but I specifically want to share what I have in mind for my dev projects this year.]]></summary></entry><entry><title type="html">Making Project Nitro</title><link href="https://natanmaia95.github.io/blog/2023/making-project-nitro/" rel="alternate" type="text/html" title="Making Project Nitro"/><published>2023-12-16T00:00:00+00:00</published><updated>2023-12-16T00:00:00+00:00</updated><id>https://natanmaia95.github.io/blog/2023/making-project-nitro</id><content type="html" xml:base="https://natanmaia95.github.io/blog/2023/making-project-nitro/"><![CDATA[<p>Last week I made <a href="https://nate-the-bard.itch.io/project-nitro">Project Nitro</a> public in my itch.io page, so I’d like to write more about the process of taking it from idea to prototype. This one is a long read as there’s so much to catch up with, but I’ll try to write shorter posts next time 😅.</p> <h2 id="idea">Idea</h2> <p>I love cars and racing, and I love making games, so of course the idea of making my dream racing game has been with me since I learned Construct 2 back in 2018 and made my first little games. Back then, there were attempts at making silly browser racing games from me, but between not knowing many programming patterns and not being satisfied with my driving physics, I scrapped all of them.</p> <p>Fast forward some 5 years, uni assignments are slowing down and I’m getting bored. I’ve already made better driving models since then, but not a lot more than following tutorials from internet people and doing some research on the side. I was on the low of dropping from two game jams and almost dropping a third, so I decided to get on with a pet project. Well, if I already have the driving systems online, how hard would it be to make a little game around it?</p> <div class="text-center"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-0.png" class="post-img-fluid rounded z-depth-1" width="auto" height="auto" title="" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption">This wasn't my first rodeo, at least with cars.</div> <h2 id="the-plan">The Plan</h2> <p>First, I’d adapt the driving model to be a bit more arcade-y. I was playing some Mario Kart and Ridge Racer at the time, so I, ahem, “borrowed” some assets to help match the feel. Then, I’d need to make a few tracks, and some way to make progress in them and complete laps. Finally, I “just” needed to get AI and items in, and make something like Blur where you choose a car, an event, you race with powerups on the track, and get points on victory.</p> <p>I definitely overscoped it.</p> <p>I just wanted to know if I knew how to make a game out of my car system, I didn’t need it to be “market-ready” or anything. What if I spent 12 months on the project and it wasn’t fun to play, or the codebase was a nightmare to work with? Something smaller was enough for my purposes.</p> <p>So the plan eventually ended on: Make a few cars, a few tracks, a Time Attack mode, and menus to go back and forth. That would be my prototype, and if it had good reception and I <em>actually enjoyed making it</em>, I could expand it to an actual game in the near future.</p> <h4 id="controls-and-camera">controls and camera</h4> <p>My original simulation model was twitchy and required very precise inputs. I knew I wanted the game to be more arcadey and accessible in general, so following <a href="https://youtu.be/n_A0RqeGado?si=eni13AUtXr2w-OrA">this GDC talk by a veteran at Criterion Games</a> and playing a bunch of NFS Hot Pursuit Remastered, I went with the following approach:</p> <ul> <li>Make more accurate simulation systems first;</li> <li>Add constraints and assists as needed.</li> </ul> <p>The suspension is your usual Raycast Suspension, and both engine and steering use simple applied forces to the rigidbody. To drift, I decrease the car’s traction to the ground and add an extra lateral force for good measure, it’s unrealistic but it’s fun like old racers. There are also “assists” to apply brakes if the car is rolling down a slope and the throttle is off, and assists to roll the car straight if it is airborne.</p> <h4 id="on-tracking-race-progress">on tracking race progress</h4> <p>The modern method nowadays is to use a spline or path throughout a track, and have cars match to the closest point in that spline. Godot Path3D nodes are still kinda funky so I went with a simpler approach: good old Checkpoints.</p> <div class="text-center"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-checkpoints.webp" class="post-img-fluid rounded z-depth-1" width="auto" height="auto" title="" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption">Checkpoints in Mario Kart are a tiny bit more complicated than this.</div> <p>Implementations can vary, but the idea is simple: To complete a race, you must <em>hit</em> all checkpoints, possibly in order. Sometimes some checkpoints can be skipped, so games use “key checkpoints” for race validation, and the smaller checkpoints for race progress. To rank drivers, check their last checkpoint, and in case of a tie, check the distance to the next checkpoint.</p> <p>I only mention this as it came back to bite me later: making AI drivers follow checkpoints was much harder than following paths. I’d need a “racing line” Path3D for computer drivers either way. This choice single-handedly made me not want to add AI drivers in this prototype, so I’ll be leaving those for a future project.</p> <h2 id="first-playtest">First Playtest</h2> <p>In my city we have a little event organized by some friends of mine, where small game developers bring their projects for other to play, give feedback, and network in general. It’s more of a “community gathering” sorta thing, although we do receive local indie studios there as well, and it’s monthly, so having started the project in October, I should be able to take it to two gatherings before the end of the year.</p> <p>I didn’t get to go to the first gathering myself, but a friend brought the demo and took some photos.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-1.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-2.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-3.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">Photos from the first playtest event. You can see the placeholder assets.</div> <p>Some bugs aside, it seems people enjoyed the build. By then I had added the Time Attack feature, and according to my friend some of the visitors there were even competing for times. I couldn’t have heard anything better from it.</p> <p>As for the bugs, the game had poor performance on the cheaper machines in the venue. Sure, I was using shadows and many light sources in that build, but “it ran at 200 FPS in my gamer laptop, so there shouldn’t be any problems”. For that reason, I switched the project’s rendering pipeline in Godot from the Vulcan based Forward+ to the at the time very incomplete OpenGL Compatibility pipeline. It didn’t even have support for shadows back then, so I was forced to make it light on resources haha.</p> <h4 id="swapping-assets">swapping assets</h4> <p>Now I just need to swap the cars and tracks. I mean, a track is a track, any layout should do right? In my first attempt, I just copied some curves from the Bernese Alps track in Forza Motorsport 4, a simulation racer. It took me some time tweaking materials and road camber to match. It felt great to drive in the original game from all the different corners and elevation changes, so I felt confident it would fit.</p> <div class="text-center"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-4.jpg" class="post-img-fluid rounded z-depth-1" width="auto" height="auto" title="" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption">Realistic? Sure. Fun? Not very.</div> <p>I couldn’t quite pinpoint why it felt bad to drive on the track, yet the stolen tracks from Mario Kart were really nice and fun. And no, it wasn’t the visuals, the car was quite fun on top of a white test cube. That was, until I finally gave up and made a test map with cylinders of various sizes to test cornering:</p> <div class="text-center"> <figure> <video src="/assets/video/devlogs/making-project-nitro-cylinders.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> <p>The corners in the Alps replica were either too wide and shallow to drift (and unlike a sim, the simple act of cornering wasn’t a challenge), or were too acute and low-speed to do high-speed drifts, which I think is the most fun part of a Mario Kart-like driving model. The placeholder tracks had wide enough corners to carry long drifts in, and sharp enough corners to test reaction time and racing lines. That day I learned track design is actually harder than it looks.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-corner1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-corner2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-corner3.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">Corner sizes were determined from the driving model. Yes, the car is not accurate to real life scale.</div> <p>I used the built-in CSG nodes in Godot to prototype the levels, which ended up being very painful as my driving model would bug out here and there, the pieces are had to lay out on the scene and somehow even harder to pick with your mouse cursor if they’re in clumps, and I again forgot you could use Path3D nodes to lay out CSG meshes to shape a track. I need to learn a new workflow (probably a blender-first, engine-later flow) if I want to make more of these maps.</p> <p>Finally, the Ridge Racer car models needed to get out. The date for the second playtest event was approaching so I didn’t want to model new vehicles myself, but also didn’t want just white cubes as vehicles. When I was looking for modelling help I still had the racing game Blur in mind as a visual inspiration, so when two members of my local community reached out to help, my request was for a more realistically modeled car. <a href="https://ilustrawes.itch.io/">Wesley</a> and <a href="https://www.artstation.com/paulohncostaart">Paulo</a> did amazing work, maybe too amazing, and now my poor decision-making lead me to a PS2 quality model in a world of white cubes…</p> <p>In the end, some more experienced contacts advised me to use only free assets for the prototype as its purpose is solely the implementation of car and race systems, and leave non-essential graphics for an actual game. I ended up following their word, and instead used the rally car models from <a href="https://assetstore.unity.com/publishers/52093">Ash Dev</a> (the earlier artists were ok with this). I then finalized some menus and picked some stock photos from Unsplash and it was ready to post online.</p> <h2 id="second-playtest">Second Playtest</h2> <p>The day had come. This time I was in town and the event was bigger than usual, being the last for the year, some 20 attendees. I was excited and a bit tense, I don’t usually show my work to so many people. Before setting up the test PCs I actually got to talk to some new faces about my project and some of the challeges above, and that’s always great. I also got to test games from my colleagues, give feedback and even help fix some bugs on the fly.</p> <div class="col mt-6"> <div class="row-sm mt-1 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-5.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="row-sm mt-1 mt-md-0"> <figure> <picture> <img src="/assets/img/devlogs/making-project-nitro-6.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">If you ever go to an event like this, I highly recommend a small notebook to write down all the feedback.</div> <p>While I didn’t get much constructive feedback on issues (people actually understood the assets were unpolished on purpose), everyone seemed to approve the controls, and had nice words about the camera work and handling. I did my job, the car was fun to control and felt fast. Sadly the venue had to close earlier than planned so people didn’t get time to replay it for fun. What a bummer.</p> <p>I did take some notes when guiding and watching the players, though. It wasn’t obvious to me until that moment but, even though the drift system is a spitting image of the one in Mario Kart, both the fact the cars don’t look like karts or cartoony in general and the drift doesn’t spark like the one in the Nintendo game, so the connection wasn’t immediate to some players and they took some slower laps while I explained drift-boosts to them. Fortunately, everyone got the hang of it by the second or third go-round.</p> <p>Also, even though I made three cars with different driving styles, unless you’re a car guy and know your Group Bs and your Lancia Deltas, their strengths weren’t immediately apparent by their design, so instead of adding some flavor text for each car or some driving stats by their side, I just had to explain why “this one drifts kinda funky”. I should probably patch this in soon.</p> <h2 id="closing-thoughts">Closing Thoughts</h2> <p>I’m glad I made Project Nitro. There were many learning opportunities throughout those two months, and it’s probably the first time I had playtesting as a major part of my project calendar. It was also great just <em>finishing</em> something in a good while, last time I made a nice and packaged project to share was Lotus and Lyric back in February.</p> <p>The dream of making a racing game is ever closer, but there’s still lots of work to do to get there. AI drivers, track layout, art direction, progression, user interface, multiplayer, these are some of the aspects that still require research from my end. I’ll also need to learn how to better manage a team of artists and contributors as I’ll likely not be able to do every single facet of the game myself, as much as I wanted to.</p> <p>Project Nitro now exists. I can fork it if I need to make another racing game. I will wait a bit more before picking it up again, though.</p>]]></content><author><name></name></author><category term="devlog"/><category term="project-nitro"/><summary type="html"><![CDATA[Last week I made Project Nitro public in my itch.io page, so I’d like to write more about the process of taking it from idea to prototype. This one is a long read as there’s so much to catch up with, but I’ll try to write shorter posts next time 😅.]]></summary></entry><entry><title type="html">I have a blog!</title><link href="https://natanmaia95.github.io/blog/2023/i-have-a-blog/" rel="alternate" type="text/html" title="I have a blog!"/><published>2023-12-10T00:00:00+00:00</published><updated>2023-12-10T00:00:00+00:00</updated><id>https://natanmaia95.github.io/blog/2023/i-have-a-blog</id><content type="html" xml:base="https://natanmaia95.github.io/blog/2023/i-have-a-blog/"><![CDATA[<p>I’m not much of a writer, nor do I use social media that much, but I still felt I needed some place to just write on what was going on in my life that week or month. It certainly beats sending screenshots of cool stuff I made to 5, 10 people at a time. Affirmation is great and all, but “Like and Retweet” numbers stress me out, so an alternative platform would be great.</p> <p>That’s why I made this blog.</p> <p>While updates will be pretty frequent at the start as I put all my backlog of news and events here in text form, and update my projects portfolio, expect the posts to slow down a far bit. I fully expect to forget this blog even exists for a few months at a time, but hey, as long as I’m living my life instead of chasing numbers, it should be OK.</p> <p>As of the time of writing this, I want to write on a few jam games I’ve made, as well as some other hobbies. Having a blog made with Jekyll makes it simple enough, so I hope I get the hang of it quick. See you there!</p>]]></content><author><name></name></author><category term="personal"/><summary type="html"><![CDATA[I’m not much of a writer, nor do I use social media that much, but I still felt I needed some place to just write on what was going on in my life that week or month. It certainly beats sending screenshots of cool stuff I made to 5, 10 people at a time. Affirmation is great and all, but “Like and Retweet” numbers stress me out, so an alternative platform would be great.]]></summary></entry></feed>